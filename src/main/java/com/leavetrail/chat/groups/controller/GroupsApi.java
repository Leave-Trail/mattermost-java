/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leavetrail.chat.groups.controller;

import com.leavetrail.chat.core.util.ApiUtil;
import com.leavetrail.chat.groups.dto.AddGroupMembersRequest;
import com.leavetrail.chat.groups.dto.AppError;
import com.leavetrail.chat.groups.dto.CreateGroupRequest;
import com.leavetrail.chat.groups.dto.DeleteGroupMembersRequest;
import com.leavetrail.chat.groups.dto.GetGroupStats200Response;
import com.leavetrail.chat.groups.dto.GetGroupUsers200Response;
import com.leavetrail.chat.groups.dto.Group;
import com.leavetrail.chat.groups.dto.GroupSyncableChannel;
import com.leavetrail.chat.groups.dto.GroupSyncableChannels;
import com.leavetrail.chat.groups.dto.GroupSyncableTeam;
import com.leavetrail.chat.groups.dto.GroupSyncableTeams;
import com.leavetrail.chat.groups.dto.GroupWithSchemeAdmin;
import com.leavetrail.chat.groups.dto.PatchGroupRequest;
import com.leavetrail.chat.groups.dto.PatchGroupSyncableForTeamRequest;
import com.leavetrail.chat.groups.dto.StatusOK;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-20T18:55:36.322086+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "groups", description = "Endpoints related to LDAP groups.")
public interface GroupsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v4/groups/{group_id}/members : Adds members to a custom group
     * Adds members to a custom group.  ##### Permissions Must have &#x60;custom_group_manage_members&#x60; permission for the given group.  __Minimum server version__: 6.3 
     *
     * @param groupId The ID of the group. (required)
     * @param addGroupMembersRequest  (required)
     * @return Successfully added the group members. (status code 200)
     *         or Do not have appropriate permissions (status code 403)
     *         or Can&#39;t find the group. (status code 404)
     *         or If the group does not have a &#x60;source&#x60; value of &#x60;custom&#x60;. (status code 501)
     */
    @Operation(
        operationId = "addGroupMembers",
        summary = "Adds members to a custom group",
        description = "Adds members to a custom group.  ##### Permissions Must have `custom_group_manage_members` permission for the given group.  __Minimum server version__: 6.3 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully added the group members.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Can't find the group."),
            @ApiResponse(responseCode = "501", description = "If the group does not have a `source` value of `custom`.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/groups/{group_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> addGroupMembers(
        @Parameter(name = "group_id", description = "The ID of the group.", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "AddGroupMembersRequest", description = "", required = true) @Valid @RequestBody AddGroupMembersRequest addGroupMembersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/groups : Create a custom group
     * Create a &#x60;custom&#x60; type group.  #### Permission Must have &#x60;create_custom_group&#x60; permission.  __Minimum server version__: 6.3 
     *
     * @param createGroupRequest Group object and initial members. (required)
     * @return Group creation and memberships successful. (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or Do not have appropriate permissions (status code 403)
     *         or Group has an invalid &#x60;source&#x60;, or &#x60;allow_reference&#x60; is not &#x60;true&#x60;, or group has a &#x60;remote_id&#x60;.  (status code 501)
     */
    @Operation(
        operationId = "createGroup",
        summary = "Create a custom group",
        description = "Create a `custom` type group.  #### Permission Must have `create_custom_group` permission.  __Minimum server version__: 6.3 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Group creation and memberships successful."),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Group has an invalid `source`, or `allow_reference` is not `true`, or group has a `remote_id`. ")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createGroup(
        @Parameter(name = "CreateGroupRequest", description = "Group object and initial members.", required = true) @Valid @RequestBody CreateGroupRequest createGroupRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/groups/{group_id} : Deletes a custom group
     * Soft deletes a custom group.  ##### Permissions Must have &#x60;custom_group_delete&#x60; permission for the given group.  __Minimum server version__: 6.3 
     *
     * @param groupId The ID of the group. (required)
     * @return Successfully deleted the group. (status code 200)
     *         or Do not have appropriate permissions (status code 403)
     *         or Group is already deleted or doesn&#39;t exist. (status code 404)
     *         or The group doesn&#39;t have a &#x60;source&#x60; value of &#x60;custom&#x60;. (status code 501)
     */
    @Operation(
        operationId = "deleteGroup",
        summary = "Deletes a custom group",
        description = "Soft deletes a custom group.  ##### Permissions Must have `custom_group_delete` permission for the given group.  __Minimum server version__: 6.3 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted the group.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Group is already deleted or doesn't exist."),
            @ApiResponse(responseCode = "501", description = "The group doesn't have a `source` value of `custom`.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/groups/{group_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> deleteGroup(
        @Parameter(name = "group_id", description = "The ID of the group.", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/groups/{group_id}/members : Removes members from a custom group
     * Soft deletes a custom group members.  ##### Permissions Must have &#x60;custom_group_manage_members&#x60; permission for the given group.  __Minimum server version__: 6.3 
     *
     * @param groupId The ID of the group to delete. (required)
     * @param deleteGroupMembersRequest  (required)
     * @return Successfully deleted the group members. (status code 200)
     *         or Do not have appropriate permissions (status code 403)
     *         or Can&#39;t find the group. (status code 404)
     *         or If the group does not have a &#x60;source&#x60; value of &#x60;custom&#x60;. (status code 501)
     */
    @Operation(
        operationId = "deleteGroupMembers",
        summary = "Removes members from a custom group",
        description = "Soft deletes a custom group members.  ##### Permissions Must have `custom_group_manage_members` permission for the given group.  __Minimum server version__: 6.3 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted the group members.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Can't find the group."),
            @ApiResponse(responseCode = "501", description = "If the group does not have a `source` value of `custom`.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/groups/{group_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> deleteGroupMembers(
        @Parameter(name = "group_id", description = "The ID of the group to delete.", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "DeleteGroupMembersRequest", description = "", required = true) @Valid @RequestBody DeleteGroupMembersRequest deleteGroupMembersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups/{group_id} : Get a group
     * Get group from the provided group id string  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @return Group retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroup",
        summary = "Get a group",
        description = "Get group from the provided group id string  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups/{group_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Group> getGroup(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups/{group_id}/stats : Get group stats
     * Retrieve the stats of a given group.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.26 
     *
     * @param groupId Group GUID (required)
     * @return Group stats retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupStats",
        summary = "Get group stats",
        description = "Retrieve the stats of a given group.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.26 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group stats retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGroupStats200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups/{group_id}/stats",
        produces = { "application/json" }
    )
    default ResponseEntity<GetGroupStats200Response> getGroupStats(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_member_count\" : 0, \"group_id\" : \"group_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups/{group_id}/channels/{channel_id} : Get GroupSyncable from channel ID
     * Get the GroupSyncable object with group_id and channel_id from params ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param channelId Channel GUID (required)
     * @return GroupSyncable object retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupSyncableForChannelId",
        summary = "Get GroupSyncable from channel ID",
        description = "Get the GroupSyncable object with group_id and channel_id from params ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "GroupSyncable object retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupSyncableChannel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups/{group_id}/channels/{channel_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<GroupSyncableChannel> getGroupSyncableForChannelId(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"create_at\" : 0, \"channel_id\" : \"channel_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups/{group_id}/teams/{team_id} : Get GroupSyncable from Team ID
     * Get the GroupSyncable object with group_id and team_id from params ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param teamId Team GUID (required)
     * @return GroupSyncable object retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupSyncableForTeamId",
        summary = "Get GroupSyncable from Team ID",
        description = "Get the GroupSyncable object with group_id and team_id from params ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "GroupSyncable object retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupSyncableTeam.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups/{group_id}/teams/{team_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<GroupSyncableTeam> getGroupSyncableForTeamId(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"team_id\" : \"team_id\", \"create_at\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups/{group_id}/channels : Get group channels
     * Retrieve the list of channels associated to the group ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @return Channel list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupSyncablesChannels",
        summary = "Get group channels",
        description = "Retrieve the list of channels associated to the group ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupSyncableChannels.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups/{group_id}/channels",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GroupSyncableChannels>> getGroupSyncablesChannels(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"channel_display_name\" : \"channel_display_name\", \"team_display_name\" : \"team_display_name\", \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"team_type\" : \"team_type\", \"team_id\" : \"team_id\", \"channel_type\" : \"channel_type\", \"create_at\" : 0, \"channel_id\" : \"channel_id\" }, { \"channel_display_name\" : \"channel_display_name\", \"team_display_name\" : \"team_display_name\", \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"team_type\" : \"team_type\", \"team_id\" : \"team_id\", \"channel_type\" : \"channel_type\", \"create_at\" : 0, \"channel_id\" : \"channel_id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups/{group_id}/teams : Get group teams
     * Retrieve the list of teams associated to the group ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @return Teams list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupSyncablesTeams",
        summary = "Get group teams",
        description = "Retrieve the list of teams associated to the group ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Teams list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupSyncableTeams.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups/{group_id}/teams",
        produces = { "application/json" }
    )
    default ResponseEntity<List<GroupSyncableTeams>> getGroupSyncablesTeams(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"team_display_name\" : \"team_display_name\", \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"team_type\" : \"team_type\", \"team_id\" : \"team_id\", \"create_at\" : 0 }, { \"team_display_name\" : \"team_display_name\", \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"team_type\" : \"team_type\", \"team_id\" : \"team_id\", \"create_at\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups/{group_id}/members : Get group users
     * Retrieve the list of users associated with a given group.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of groups per page. (optional, default to 60)
     * @return User list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupUsers",
        summary = "Get group users",
        description = "Retrieve the list of users associated with a given group.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User list retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGroupUsers200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups/{group_id}/members",
        produces = { "application/json" }
    )
    default ResponseEntity<GetGroupUsers200Response> getGroupUsers(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of groups per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_member_count\" : 9, \"members\" : [ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/groups : Get groups
     * Retrieve a list of all groups not associated to a particular channel or team.  &#x60;not_associated_to_team&#x60; **OR** &#x60;not_associated_to_channel&#x60; is required.  If you use &#x60;not_associated_to_team&#x60;, you must be a team admin for that particular team (permission to manage that team).  If you use &#x60;not_associated_to_channel&#x60;, you must be a channel admin for that particular channel (permission to manage that channel).  __Minimum server version__: 5.11 
     *
     * @param notAssociatedToTeam Team GUID which is used to return all the groups not associated to this team (required)
     * @param notAssociatedToChannel Group GUID which is used to return all the groups not associated to this channel (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of groups per page. (optional, default to 60)
     * @param q String to pattern match the &#x60;name&#x60; and &#x60;display_name&#x60; field. Will return all groups whose &#x60;name&#x60; and &#x60;display_name&#x60; field match any of the text. (optional)
     * @param includeMemberCount Boolean which adds the &#x60;member_count&#x60; attribute to each group JSON object (optional)
     * @param since Only return groups that have been modified since the given Unix timestamp (in milliseconds). All modified groups, including deleted and created groups, will be returned. __Minimum server version__: 5.24  (optional)
     * @param filterAllowReference Boolean which filters the group entries with the &#x60;allow_reference&#x60; attribute set. (optional, default to false)
     * @return Group list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroups",
        summary = "Get groups",
        description = "Retrieve a list of all groups not associated to a particular channel or team.  `not_associated_to_team` **OR** `not_associated_to_channel` is required.  If you use `not_associated_to_team`, you must be a team admin for that particular team (permission to manage that team).  If you use `not_associated_to_channel`, you must be a channel admin for that particular channel (permission to manage that channel).  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Group.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/groups",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Group>> getGroups(
        @NotNull @Parameter(name = "not_associated_to_team", description = "Team GUID which is used to return all the groups not associated to this team", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "not_associated_to_team", required = true) String notAssociatedToTeam,
        @NotNull @Parameter(name = "not_associated_to_channel", description = "Group GUID which is used to return all the groups not associated to this channel", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "not_associated_to_channel", required = true) String notAssociatedToChannel,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of groups per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage,
        @Parameter(name = "q", description = "String to pattern match the `name` and `display_name` field. Will return all groups whose `name` and `display_name` field match any of the text.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = false) String q,
        @Parameter(name = "include_member_count", description = "Boolean which adds the `member_count` attribute to each group JSON object", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_member_count", required = false) Boolean includeMemberCount,
        @Parameter(name = "since", description = "Only return groups that have been modified since the given Unix timestamp (in milliseconds). All modified groups, including deleted and created groups, will be returned. __Minimum server version__: 5.24 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) Integer since,
        @Parameter(name = "filter_allow_reference", description = "Boolean which filters the group entries with the `allow_reference` attribute set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter_allow_reference", required = false, defaultValue = "false") Boolean filterAllowReference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true }, { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/groups_by_channels : Get team groups by channels
     * Retrieve the set of groups associated with the channels in the given team grouped by channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission or can access only for current user  __Minimum server version__: 5.11 
     *
     * @param teamId Team GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of groups per page. (optional, default to 60)
     * @param filterAllowReference Boolean which filters in the group entries with the &#x60;allow_reference&#x60; attribute set. (optional, default to false)
     * @param paginate Boolean to determine whether the pagination should be applied or not (optional, default to false)
     * @return Group list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupsAssociatedToChannelsByTeam",
        summary = "Get team groups by channels",
        description = "Retrieve the set of groups associated with the channels in the given team grouped by channel.  ##### Permissions Must have `manage_system` permission or can access only for current user  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GroupWithSchemeAdmin.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/groups_by_channels",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Map<String, List<GroupWithSchemeAdmin>>>> getGroupsAssociatedToChannelsByTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of groups per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage,
        @Parameter(name = "filter_allow_reference", description = "Boolean which filters in the group entries with the `allow_reference` attribute set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter_allow_reference", required = false, defaultValue = "false") Boolean filterAllowReference,
        @Parameter(name = "paginate", description = "Boolean to determine whether the pagination should be applied or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "paginate", required = false, defaultValue = "false") Boolean paginate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/groups : Get channel groups
     * Retrieve the list of groups associated with a given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param channelId Channel GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of groups per page. (optional, default to 60)
     * @param filterAllowReference Boolean which filters the group entries with the &#x60;allow_reference&#x60; attribute set. (optional, default to false)
     * @return Group list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupsByChannel",
        summary = "Get channel groups",
        description = "Retrieve the list of groups associated with a given channel.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Group.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/groups",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Group>> getGroupsByChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of groups per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage,
        @Parameter(name = "filter_allow_reference", description = "Boolean which filters the group entries with the `allow_reference` attribute set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter_allow_reference", required = false, defaultValue = "false") Boolean filterAllowReference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true }, { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/groups : Get team groups
     * Retrieve the list of groups associated with a given team.  __Minimum server version__: 5.11 
     *
     * @param teamId Team GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of groups per page. (optional, default to 60)
     * @param filterAllowReference Boolean which filters in the group entries with the &#x60;allow_reference&#x60; attribute set. (optional, default to false)
     * @return Group list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupsByTeam",
        summary = "Get team groups",
        description = "Retrieve the list of groups associated with a given team.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Group.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/groups",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Group>> getGroupsByTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of groups per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage,
        @Parameter(name = "filter_allow_reference", description = "Boolean which filters in the group entries with the `allow_reference` attribute set.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter_allow_reference", required = false, defaultValue = "false") Boolean filterAllowReference
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true }, { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/groups : Get groups for a userId
     * Retrieve the list of groups associated to the user  __Minimum server version__: 5.24 
     *
     * @param userId User GUID (required)
     * @return Group list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getGroupsByUserId",
        summary = "Get groups for a userId",
        description = "Retrieve the list of groups associated to the user  __Minimum server version__: 5.24 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Group.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/groups",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Group>> getGroupsByUserId(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true }, { \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/groups/{group_id}/channels/{channel_id}/link : Link a channel to a group
     * Link a channel to a group ##### Permissions If the channel is private, you must have &#x60;manage_private_channel_members&#x60; permission. Otherwise, you must have the &#x60;manage_public_channel_members&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param channelId Channel GUID (required)
     * @return Channel successfully linked to group (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "linkGroupSyncableForChannel",
        summary = "Link a channel to a group",
        description = "Link a channel to a group ##### Permissions If the channel is private, you must have `manage_private_channel_members` permission. Otherwise, you must have the `manage_public_channel_members` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Channel successfully linked to group", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupSyncableChannel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/groups/{group_id}/channels/{channel_id}/link",
        produces = { "application/json" }
    )
    default ResponseEntity<GroupSyncableChannel> linkGroupSyncableForChannel(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"create_at\" : 0, \"channel_id\" : \"channel_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/groups/{group_id}/teams/{team_id}/link : Link a team to a group
     * Link a team to a group ##### Permissions Must have &#x60;manage_team&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param teamId Team GUID (required)
     * @return Team successfully linked to group (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "linkGroupSyncableForTeam",
        summary = "Link a team to a group",
        description = "Link a team to a group ##### Permissions Must have `manage_team` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Team successfully linked to group", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupSyncableTeam.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/groups/{group_id}/teams/{team_id}/link",
        produces = { "application/json" }
    )
    default ResponseEntity<GroupSyncableTeam> linkGroupSyncableForTeam(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"team_id\" : \"team_id\", \"create_at\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/groups/{group_id}/patch : Patch a group
     * Partially update a group by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param patchGroupRequest Group object that is to be updated (required)
     * @return Group patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "patchGroup",
        summary = "Patch a group",
        description = "Partially update a group by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Group patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Group.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/groups/{group_id}/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Group> patchGroup(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "PatchGroupRequest", description = "Group object that is to be updated", required = true) @Valid @RequestBody PatchGroupRequest patchGroupRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"remote_id\" : \"remote_id\", \"name\" : \"name\", \"update_at\" : 6, \"description\" : \"description\", \"delete_at\" : 1, \"id\" : \"id\", \"source\" : \"source\", \"display_name\" : \"display_name\", \"create_at\" : 0, \"has_syncables\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/groups/{group_id}/channels/{channel_id}/patch : Patch a GroupSyncable associated to Channel
     * Partially update a GroupSyncable by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param channelId Channel GUID (required)
     * @param patchGroupSyncableForTeamRequest GroupSyncable object that is to be updated (required)
     * @return GroupSyncable patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "patchGroupSyncableForChannel",
        summary = "Patch a GroupSyncable associated to Channel",
        description = "Partially update a GroupSyncable by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "GroupSyncable patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupSyncableChannel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/groups/{group_id}/channels/{channel_id}/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GroupSyncableChannel> patchGroupSyncableForChannel(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "PatchGroupSyncableForTeamRequest", description = "GroupSyncable object that is to be updated", required = true) @Valid @RequestBody PatchGroupSyncableForTeamRequest patchGroupSyncableForTeamRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"create_at\" : 0, \"channel_id\" : \"channel_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/groups/{group_id}/teams/{team_id}/patch : Patch a GroupSyncable associated to Team
     * Partially update a GroupSyncable by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param teamId Team GUID (required)
     * @param patchGroupSyncableForTeamRequest GroupSyncable object that is to be updated (required)
     * @return GroupSyncable patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "patchGroupSyncableForTeam",
        summary = "Patch a GroupSyncable associated to Team",
        description = "Partially update a GroupSyncable by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "GroupSyncable patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupSyncableTeam.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/groups/{group_id}/teams/{team_id}/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GroupSyncableTeam> patchGroupSyncableForTeam(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "PatchGroupSyncableForTeamRequest", description = "GroupSyncable object that is to be updated", required = true) @Valid @RequestBody PatchGroupSyncableForTeamRequest patchGroupSyncableForTeamRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"group_id\" : \"group_id\", \"auto_add\" : true, \"update_at\" : 1, \"delete_at\" : 6, \"team_id\" : \"team_id\", \"create_at\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/groups/{group_id}/channels/{channel_id}/link : Delete a link from a channel to a group
     * Delete a link from a channel to a group ##### Permissions If the channel is private, you must have &#x60;manage_private_channel_members&#x60; permission. Otherwise, you must have the &#x60;manage_public_channel_members&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param channelId Channel GUID (required)
     * @return Successfully deleted link between channel and group (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "unlinkGroupSyncableForChannel",
        summary = "Delete a link from a channel to a group",
        description = "Delete a link from a channel to a group ##### Permissions If the channel is private, you must have `manage_private_channel_members` permission. Otherwise, you must have the `manage_public_channel_members` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted link between channel and group", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/groups/{group_id}/channels/{channel_id}/link",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> unlinkGroupSyncableForChannel(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/groups/{group_id}/teams/{team_id}/link : Delete a link from a team to a group
     * Delete a link from a team to a group ##### Permissions Must have &#x60;manage_team&#x60; permission.  __Minimum server version__: 5.11 
     *
     * @param groupId Group GUID (required)
     * @param teamId Team GUID (required)
     * @return Successfully deleted link between team and group (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "unlinkGroupSyncableForTeam",
        summary = "Delete a link from a team to a group",
        description = "Delete a link from a team to a group ##### Permissions Must have `manage_team` permission.  __Minimum server version__: 5.11 ",
        tags = { "groups" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted link between team and group", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/groups/{group_id}/teams/{team_id}/link",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> unlinkGroupSyncableForTeam(
        @Parameter(name = "group_id", description = "Group GUID", required = true, in = ParameterIn.PATH) @PathVariable("group_id") String groupId,
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
