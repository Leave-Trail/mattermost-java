/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leavetrail.chat.users.controller;

import com.leavetrail.chat.core.dto.AppError;
import com.leavetrail.chat.core.dto.StatusOK;
import com.leavetrail.chat.core.util.ApiUtil;
import com.leavetrail.chat.users.dto.AttachDeviceIdRequest;
import com.leavetrail.chat.users.dto.Audit;
import java.math.BigDecimal;
import com.leavetrail.chat.users.dto.ChannelMemberWithTeamData;
import com.leavetrail.chat.users.dto.CheckUserMfa200Response;
import com.leavetrail.chat.users.dto.CheckUserMfaRequest;
import com.leavetrail.chat.users.dto.CreateUserAccessTokenRequest;
import com.leavetrail.chat.users.dto.CreateUserRequest;
import com.leavetrail.chat.users.dto.DisableUserAccessTokenRequest;
import com.leavetrail.chat.users.dto.EnableUserAccessTokenRequest;
import com.leavetrail.chat.users.dto.GenerateMfaSecret200Response;
import com.leavetrail.chat.users.dto.GetUsersByGroupChannelIds200Response;
import java.util.List;
import com.leavetrail.chat.users.dto.LoginByCwsTokenRequest;
import com.leavetrail.chat.users.dto.LoginRequest;
import com.leavetrail.chat.users.dto.MigrateAuthToLdapRequest;
import com.leavetrail.chat.users.dto.MigrateAuthToSamlRequest;
import com.leavetrail.chat.users.dto.PatchUserRequest;
import com.leavetrail.chat.users.dto.PublishUserTypingRequest;
import com.leavetrail.chat.users.dto.RegisterTermsOfServiceActionRequest;
import com.leavetrail.chat.users.dto.ResetPasswordRequest;
import com.leavetrail.chat.users.dto.RevokeSessionRequest;
import com.leavetrail.chat.users.dto.RevokeUserAccessTokenRequest;
import com.leavetrail.chat.users.dto.SearchUserAccessTokensRequest;
import com.leavetrail.chat.users.dto.SearchUsersRequest;
import com.leavetrail.chat.users.dto.SendPasswordResetEmailRequest;
import com.leavetrail.chat.users.dto.SendVerificationEmailRequest;
import com.leavetrail.chat.users.dto.Session;
import com.leavetrail.chat.users.dto.SwitchAccountType200Response;
import com.leavetrail.chat.users.dto.SwitchAccountTypeRequest;
import com.leavetrail.chat.users.dto.UpdateUserActiveRequest;
import com.leavetrail.chat.users.dto.UpdateUserMfaRequest;
import com.leavetrail.chat.users.dto.UpdateUserPasswordRequest;
import com.leavetrail.chat.users.dto.UpdateUserRequest;
import com.leavetrail.chat.users.dto.UpdateUserRolesRequest;
import com.leavetrail.chat.users.dto.UploadSession;
import com.leavetrail.chat.users.dto.User;
import com.leavetrail.chat.users.dto.UserAccessToken;
import com.leavetrail.chat.users.dto.UserAccessTokenSanitized;
import com.leavetrail.chat.users.dto.UserAuthData;
import com.leavetrail.chat.users.dto.UserAutocomplete;
import com.leavetrail.chat.users.dto.UserTermsOfService;
import com.leavetrail.chat.users.dto.UserThreads;
import com.leavetrail.chat.users.dto.UsersStats;
import com.leavetrail.chat.users.dto.VerifyUserEmailRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-22T11:38:02.062529+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "users", description = "Endpoints for creating, getting and interacting with users. When using endpoints that require a user id, the string `me` can be used in place of the user id to indicate the action is to be taken for the logged in user.")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /api/v4/users/sessions/device : Attach mobile device
     * Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
     *
     * @param attachDeviceIdRequest  (required)
     * @return Device id attach successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     */
    @Operation(
        operationId = "attachDeviceId",
        summary = "Attach mobile device",
        description = "Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Device id attach successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/sessions/device",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> attachDeviceId(
        @Parameter(name = "AttachDeviceIdRequest", description = "", required = true) @Valid @RequestBody AttachDeviceIdRequest attachDeviceIdRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/autocomplete : Autocomplete users
     * Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
     *
     * @param name Username, nickname first name or last name (required)
     * @param teamId Team ID (optional)
     * @param channelId Channel ID (optional)
     * @param limit The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)
     * @return User autocomplete successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "autocompleteUsers",
        summary = "Autocomplete users",
        description = "Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of `team_id` and `channel_id` to filter results further. ##### Permissions Requires an active session and `view_team` and `read_channel` on any teams or channels used to filter the results further. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User autocomplete successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserAutocomplete.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/autocomplete",
        produces = { "application/json" }
    )
    default ResponseEntity<UserAutocomplete> autocompleteUsers(
        @NotNull @Parameter(name = "name", description = "Username, nickname first name or last name", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name,
        @Parameter(name = "team_id", description = "Team ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team_id", required = false) String teamId,
        @Parameter(name = "channel_id", description = "Channel ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "channel_id", required = false) String channelId,
        @Parameter(name = "limit", description = "The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to `100` if not provided or on an earlier server version.__ ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "100") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"out_of_channel\" : [ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ], \"users\" : [ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/mfa : Check MFA
     * Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
     *
     * @param checkUserMfaRequest  (required)
     * @return MFA check successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     */
    @Operation(
        operationId = "checkUserMfa",
        summary = "Check MFA",
        description = "Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "MFA check successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckUserMfa200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/mfa",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CheckUserMfa200Response> checkUserMfa(
        @Parameter(name = "CheckUserMfaRequest", description = "", required = true) @Valid @RequestBody CheckUserMfaRequest checkUserMfaRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mfa_required\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/convert_to_bot : Convert a user into a bot
     * Convert a user into a bot.  __Minimum server version__: 5.26  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return User successfully converted (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "convertUserToBot",
        summary = "Convert a user into a bot",
        description = "Convert a user into a bot.  __Minimum server version__: 5.26  ##### Permissions Must have `manage_system` permission. ",
        tags = { "bots", "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully converted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/convert_to_bot",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> convertUserToBot(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users : Create a user
     * Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required for creating email/username accounts on an open server. Auth Token is required for other authentication types such as LDAP or SAML. 
     *
     * @param createUserRequest User object to be created (required)
     * @param t Token id from an email invitation (optional)
     * @param iid Token id from an invitation link (optional)
     * @return User creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create a user",
        description = "Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required for creating email/username accounts on an open server. Auth Token is required for other authentication types such as LDAP or SAML. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> createUser(
        @Parameter(name = "CreateUserRequest", description = "User object to be created", required = true) @Valid @RequestBody CreateUserRequest createUserRequest,
        @Parameter(name = "t", description = "Token id from an email invitation", in = ParameterIn.QUERY) @Valid @RequestParam(value = "t", required = false) String t,
        @Parameter(name = "iid", description = "Token id from an invitation link", in = ParameterIn.QUERY) @Valid @RequestParam(value = "iid", required = false) String iid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/tokens : Create a user access token
     * Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param createUserAccessTokenRequest  (required)
     * @return User access token creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createUserAccessToken",
        summary = "Create a user access token",
        description = "Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have `create_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User access token creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserAccessToken.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/tokens",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserAccessToken> createUserAccessToken(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "CreateUserAccessTokenRequest", description = "", required = true) @Valid @RequestBody CreateUserAccessTokenRequest createUserAccessTokenRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\", \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/users/{user_id} : Deactivate a user account.
     * Deactivates the user and revokes all its sessions by archiving its user object.  As of server version 5.28, optionally use the &#x60;permanent&#x3D;true&#x60; query parameter to permanently delete the user for compliance reasons. To use this feature &#x60;ServiceSettings.EnableAPIUserDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return User deactivation successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Deactivate a user account.",
        description = "Deactivates the user and revokes all its sessions by archiving its user object.  As of server version 5.28, optionally use the `permanent=true` query parameter to permanently delete the user for compliance reasons. To use this feature `ServiceSettings.EnableAPIUserDeletion` must be set to `true` in the server's configuration. ##### Permissions Must be logged in as the user being deactivated or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User deactivation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/users/{user_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> deleteUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/demote : Demote a user to a guest
     * Convert a regular user into a guest. This will convert the user into a guest for the whole system while retaining their existing team and channel memberships.  __Minimum server version__: 5.16  ##### Permissions Must be logged in as the user or have the &#x60;demote_to_guest&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return User successfully demoted (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "demoteUserToGuest",
        summary = "Demote a user to a guest",
        description = "Convert a regular user into a guest. This will convert the user into a guest for the whole system while retaining their existing team and channel memberships.  __Minimum server version__: 5.16  ##### Permissions Must be logged in as the user or have the `demote_to_guest` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User successfully demoted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/demote",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> demoteUserToGuest(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/tokens/disable : Disable personal access token
     * Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param disableUserAccessTokenRequest  (required)
     * @return Personal access token disable successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "disableUserAccessToken",
        summary = "Disable personal access token",
        description = "Disable a personal access token and delete any sessions using the token. The token can be re-enabled using `/users/tokens/enable`.  __Minimum server version__: 4.4  ##### Permissions Must have `revoke_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Personal access token disable successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/tokens/disable",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> disableUserAccessToken(
        @Parameter(name = "DisableUserAccessTokenRequest", description = "", required = true) @Valid @RequestBody DisableUserAccessTokenRequest disableUserAccessTokenRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/tokens/enable : Enable personal access token
     * Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param enableUserAccessTokenRequest  (required)
     * @return Personal access token enable successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "enableUserAccessToken",
        summary = "Enable personal access token",
        description = "Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have `create_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Personal access token enable successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/tokens/enable",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> enableUserAccessToken(
        @Parameter(name = "EnableUserAccessTokenRequest", description = "", required = true) @Valid @RequestBody EnableUserAccessTokenRequest enableUserAccessTokenRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/mfa/generate : Generate MFA secret
     * Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return MFA secret generation successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "generateMfaSecret",
        summary = "Generate MFA secret",
        description = "Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "MFA secret generation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateMfaSecret200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/mfa/generate",
        produces = { "application/json" }
    )
    default ResponseEntity<GenerateMfaSecret200Response> generateMfaSecret(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"qr_code\" : \"qr_code\", \"secret\" : \"secret\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/channel_members : Get all channel members from all teams for a user
     * Get all channel members from all teams for a user.  __Minimum server version__: 6.2.0  ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId The ID of the user. This can also be \&quot;me\&quot; which will point to the current user. (required)
     * @param page Page specifies which part of the results to return, by PageSize. (optional)
     * @param pageSize PageSize specifies the size of the returned chunk of results. (optional)
     * @return User&#39;s uploads retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannelMembersWithTeamDataForUser",
        summary = "Get all channel members from all teams for a user",
        description = "Get all channel members from all teams for a user.  __Minimum server version__: 6.2.0  ##### Permissions Logged in as the user, or have `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User's uploads retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChannelMemberWithTeamData.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/channel_members",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ChannelMemberWithTeamData>> getChannelMembersWithTeamDataForUser(
        @Parameter(name = "user_id", description = "The ID of the user. This can also be \"me\" which will point to the current user.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "page", description = "Page specifies which part of the results to return, by PageSize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "pageSize", description = "PageSize specifies the size of the returned chunk of results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/image/default : Return user&#39;s default (generated) profile image
     * Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
     *
     * @param userId User GUID (required)
     * @return Default profile image (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getDefaultProfileImage",
        summary = "Return user's default (generated) profile image",
        description = "Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Default profile image"),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/image/default",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getDefaultProfileImage(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/known : Get user IDs of known users
     * Get the list of user IDs of users with any direct relationship with a user. That means any user sharing any channel, including direct and group channels. ##### Permissions Must be authenticated.  __Minimum server version__: 5.23 
     *
     * @return Known users&#39; IDs retrieval successful (status code 200)
     *         or No access token provided (status code 401)
     */
    @Operation(
        operationId = "getKnownUsers",
        summary = "Get user IDs of known users",
        description = "Get the list of user IDs of users with any direct relationship with a user. That means any user sharing any channel, including direct and group channels. ##### Permissions Must be authenticated.  __Minimum server version__: 5.23 ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Known users' IDs retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/known",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getKnownUsers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/image : Get user&#39;s profile image
     * Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
     *
     * @param userId User GUID (required)
     * @param u Not used by the server. Clients can pass in the last picture update time of the user to potentially take advantage of caching (optional)
     * @return User&#39;s profile image (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getProfileImage",
        summary = "Get user's profile image",
        description = "Get a user's profile image based on user_id string parameter. ##### Permissions Must be logged in. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User's profile image"),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/image",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getProfileImage(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "_", description = "Not used by the server. Clients can pass in the last picture update time of the user to potentially take advantage of caching", in = ParameterIn.QUERY) @Valid @RequestParam(value = "_", required = false) BigDecimal u
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/sessions : Get user&#39;s sessions
     * Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return User session retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getSessions",
        summary = "Get user's sessions",
        description = "Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User session retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Session.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/sessions",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Session>> getSessions(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"expires_at\" : 6, \"device_id\" : \"device_id\", \"user_id\" : \"user_id\", \"last_activity_at\" : 1, \"roles\" : \"roles\", \"team_members\" : [ { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 5, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }, { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 5, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true } ], \"id\" : \"id\", \"create_at\" : 0, \"is_oauth\" : true, \"props\" : \"{}\", \"token\" : \"token\" }, { \"expires_at\" : 6, \"device_id\" : \"device_id\", \"user_id\" : \"user_id\", \"last_activity_at\" : 1, \"roles\" : \"roles\", \"team_members\" : [ { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 5, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }, { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 5, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true } ], \"id\" : \"id\", \"create_at\" : 0, \"is_oauth\" : true, \"props\" : \"{}\", \"token\" : \"token\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/stats : Get total count of users in the system
     * Get a total count of users in the system. ##### Permissions Must be authenticated. 
     *
     * @return User stats retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTotalUsersStats",
        summary = "Get total count of users in the system",
        description = "Get a total count of users in the system. ##### Permissions Must be authenticated. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User stats retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersStats.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/stats",
        produces = { "application/json" }
    )
    default ResponseEntity<UsersStats> getTotalUsersStats(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_users_count\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/stats/filtered : Get total count of users in the system matching the specified filters
     * Get a count of users in the system matching the specified filters.  __Minimum server version__: 5.26  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param inTeam The ID of the team to get user stats for. (optional)
     * @param inChannel The ID of the channel to get user stats for. (optional)
     * @param includeDeleted If deleted accounts should be included in the count. (optional)
     * @param includeBots If bot accounts should be included in the count. (optional)
     * @param roles Comma separated string used to filter users based on any of the specified system roles  Example: &#x60;?roles&#x3D;system_admin,system_user&#x60; will include users that are either system admins or system users  (optional)
     * @param channelRoles Comma separated string used to filter users based on any of the specified channel roles, can only be used in conjunction with &#x60;in_channel&#x60;  Example: &#x60;?in_channel&#x3D;4eb6axxw7fg3je5iyasnfudc5y&amp;channel_roles&#x3D;channel_user&#x60; will include users that are only channel users and not admins or guests  (optional)
     * @param teamRoles Comma separated string used to filter users based on any of the specified team roles, can only be used in conjunction with &#x60;in_team&#x60;  Example: &#x60;?in_team&#x3D;4eb6axxw7fg3je5iyasnfudc5y&amp;team_roles&#x3D;team_user&#x60; will include users that are only team users and not admins or guests  (optional)
     * @return Filtered User stats retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTotalUsersStatsFiltered",
        summary = "Get total count of users in the system matching the specified filters",
        description = "Get a count of users in the system matching the specified filters.  __Minimum server version__: 5.26  ##### Permissions Must have `manage_system` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Filtered User stats retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UsersStats.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/stats/filtered",
        produces = { "application/json" }
    )
    default ResponseEntity<UsersStats> getTotalUsersStatsFiltered(
        @Parameter(name = "in_team", description = "The ID of the team to get user stats for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "in_team", required = false) String inTeam,
        @Parameter(name = "in_channel", description = "The ID of the channel to get user stats for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "in_channel", required = false) String inChannel,
        @Parameter(name = "include_deleted", description = "If deleted accounts should be included in the count.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false) Boolean includeDeleted,
        @Parameter(name = "include_bots", description = "If bot accounts should be included in the count.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_bots", required = false) Boolean includeBots,
        @Parameter(name = "roles", description = "Comma separated string used to filter users based on any of the specified system roles  Example: `?roles=system_admin,system_user` will include users that are either system admins or system users ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "roles", required = false) String roles,
        @Parameter(name = "channel_roles", description = "Comma separated string used to filter users based on any of the specified channel roles, can only be used in conjunction with `in_channel`  Example: `?in_channel=4eb6axxw7fg3je5iyasnfudc5y&channel_roles=channel_user` will include users that are only channel users and not admins or guests ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "channel_roles", required = false) String channelRoles,
        @Parameter(name = "team_roles", description = "Comma separated string used to filter users based on any of the specified team roles, can only be used in conjunction with `in_team`  Example: `?in_team=4eb6axxw7fg3je5iyasnfudc5y&team_roles=team_user` will include users that are only team users and not admins or guests ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team_roles", required = false) String teamRoles
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_users_count\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/uploads : Get uploads for a user
     * Gets all the upload sessions belonging to a user.  __Minimum server version__: 5.28  ##### Permissions Must be logged in as the user who created the upload sessions. 
     *
     * @param userId The ID of the user. This can also be \&quot;me\&quot; which will point to the current user. (required)
     * @return User&#39;s uploads retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getUploadsForUser",
        summary = "Get uploads for a user",
        description = "Gets all the upload sessions belonging to a user.  __Minimum server version__: 5.28  ##### Permissions Must be logged in as the user who created the upload sessions. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User's uploads retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UploadSession.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/uploads",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UploadSession>> getUploadsForUser(
        @Parameter(name = "user_id", description = "The ID of the user. This can also be \"me\" which will point to the current user.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"filename\" : \"filename\", \"user_id\" : \"user_id\", \"id\" : \"id\", \"type\" : \"attachment\", \"create_at\" : 0, \"channel_id\" : \"channel_id\", \"file_offset\" : 1, \"file_size\" : 6 }, { \"filename\" : \"filename\", \"user_id\" : \"user_id\", \"id\" : \"id\", \"type\" : \"attachment\", \"create_at\" : 0, \"channel_id\" : \"channel_id\", \"file_offset\" : 1, \"file_size\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id} : Get a user
     * Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
     *
     * @param userId User GUID. This can also be \&quot;me\&quot; which will point to the current user. (required)
     * @return User retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getUser",
        summary = "Get a user",
        description = "Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUser(
        @Parameter(name = "user_id", description = "User GUID. This can also be \"me\" which will point to the current user.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/tokens/{token_id} : Get a user access token
     * Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param tokenId User access token GUID (required)
     * @return User access token retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getUserAccessToken",
        summary = "Get a user access token",
        description = "Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have `read_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User access token retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserAccessTokenSanitized.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/tokens/{token_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserAccessTokenSanitized> getUserAccessToken(
        @Parameter(name = "token_id", description = "User access token GUID", required = true, in = ParameterIn.PATH) @PathVariable("token_id") String tokenId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"is_active\" : true, \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/tokens : Get user access tokens
     * Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of tokens per page. (optional, default to 60)
     * @return User access tokens retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getUserAccessTokens",
        summary = "Get user access tokens",
        description = "Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have `manage_system` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User access tokens retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserAccessTokenSanitized.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/tokens",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserAccessTokenSanitized>> getUserAccessTokens(
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of tokens per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"is_active\" : true, \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\" }, { \"is_active\" : true, \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/tokens : Get user access tokens
     * Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of tokens per page. (optional, default to 60)
     * @return User access tokens retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getUserAccessTokensForUser",
        summary = "Get user access tokens",
        description = "Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have `read_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User access tokens retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserAccessTokenSanitized.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/tokens",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserAccessTokenSanitized>> getUserAccessTokensForUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of tokens per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"is_active\" : true, \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\" }, { \"is_active\" : true, \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/audits : Get user&#39;s audits
     * Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return User audits retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getUserAudits",
        summary = "Get user's audits",
        description = "Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User audits retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Audit.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/audits",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Audit>> getUserAudits(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"extra_info\" : \"extra_info\", \"user_id\" : \"user_id\", \"action\" : \"action\", \"session_id\" : \"session_id\", \"id\" : \"id\", \"ip_address\" : \"ip_address\", \"create_at\" : 0 }, { \"extra_info\" : \"extra_info\", \"user_id\" : \"user_id\", \"action\" : \"action\", \"session_id\" : \"session_id\", \"id\" : \"id\", \"ip_address\" : \"ip_address\", \"create_at\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/email/{email} : Get a user by email
     * Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
     *
     * @param email User Email (required)
     * @return User retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getUserByEmail",
        summary = "Get a user by email",
        description = "Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user's email based on the server's privacy settings. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/email/{email}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserByEmail(
        @Parameter(name = "email", description = "User Email", required = true, in = ParameterIn.PATH) @PathVariable("email") String email
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/username/{username} : Get a user by username
     * Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
     *
     * @param username Username (required)
     * @return User retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getUserByUsername",
        summary = "Get a user by username",
        description = "Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/username/{username}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserByUsername(
        @Parameter(name = "username", description = "Username", required = true, in = ParameterIn.PATH) @PathVariable("username") String username
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/terms_of_service : Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
     * Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
     *
     * @param userId User GUID (required)
     * @return User&#39;s accepted terms of service action (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or User hasn&#39;t performed an action or the latest action was a rejection. (status code 404)
     */
    @Operation(
        operationId = "getUserTermsOfService",
        summary = "Fetches user's latest terms of service action if the latest action was for acceptance.",
        description = "Will be deprecated in v6.0 Fetches user's latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. ",
        tags = { "users", "terms of service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User's accepted terms of service action", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserTermsOfService.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "User hasn't performed an action or the latest action was a rejection.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/terms_of_service",
        produces = { "application/json" }
    )
    default ResponseEntity<UserTermsOfService> getUserTermsOfService(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"terms_of_service_id\" : \"terms_of_service_id\", \"create_at\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/{team_id}/threads : Get all threads that user is following
     * Get all threads that user is following  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId The ID of the user. This can also be \&quot;me\&quot; which will point to the current user. (required)
     * @param teamId The ID of the team in which the thread is. (required)
     * @param since Since filters the threads based on their LastUpdateAt timestamp. (optional)
     * @param deleted Deleted will specify that even deleted threads should be returned (For mobile sync). (optional, default to false)
     * @param extended Extended will enrich the response with participant details. (optional, default to false)
     * @param page Page specifies which part of the results to return, by PageSize. (optional, default to 0)
     * @param pageSize PageSize specifies the size of the returned chunk of results. (optional, default to 30)
     * @param totalsOnly Setting this to true will only return the total counts. (optional, default to false)
     * @param threadsOnly Setting this to true will only return threads. (optional, default to false)
     * @return User&#39;s thread retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getUserThreads",
        summary = "Get all threads that user is following",
        description = "Get all threads that user is following  __Minimum server version__: 5.29  ##### Permissions Must be logged in as the user or have `edit_other_users` permission. ",
        tags = { "threads" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User's thread retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserThreads.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/{team_id}/threads",
        produces = { "application/json" }
    )
    default ResponseEntity<UserThreads> getUserThreads(
        @Parameter(name = "user_id", description = "The ID of the user. This can also be \"me\" which will point to the current user.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "team_id", description = "The ID of the team in which the thread is.", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "since", description = "Since filters the threads based on their LastUpdateAt timestamp.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) Integer since,
        @Parameter(name = "deleted", description = "Deleted will specify that even deleted threads should be returned (For mobile sync).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deleted", required = false, defaultValue = "false") Boolean deleted,
        @Parameter(name = "extended", description = "Extended will enrich the response with participant details.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "extended", required = false, defaultValue = "false") Boolean extended,
        @Parameter(name = "page", description = "Page specifies which part of the results to return, by PageSize.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "pageSize", description = "PageSize specifies the size of the returned chunk of results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "30") Integer pageSize,
        @Parameter(name = "totalsOnly", description = "Setting this to true will only return the total counts.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "totalsOnly", required = false, defaultValue = "false") Boolean totalsOnly,
        @Parameter(name = "threadsOnly", description = "Setting this to true will only return threads.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "threadsOnly", required = false, defaultValue = "false") Boolean threadsOnly
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 0, \"threads\" : [ { \"last_reply_at\" : 1, \"post\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 } ], \"images\" : [ { \"width\" : 4, \"height\" : 1 }, { \"width\" : 4, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 2, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 7, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 5, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 9, \"hashtag\" : \"hashtag\" }, \"last_viewed_at\" : 5, \"id\" : \"id\", \"reply_count\" : 6, \"participants\" : [ { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 } ], \"images\" : [ { \"width\" : 4, \"height\" : 1 }, { \"width\" : 4, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 2, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 7, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 5, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 9, \"hashtag\" : \"hashtag\" }, { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 } ], \"images\" : [ { \"width\" : 4, \"height\" : 1 }, { \"width\" : 4, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 2, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 7, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 5, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 9, \"hashtag\" : \"hashtag\" } ] }, { \"last_reply_at\" : 1, \"post\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 } ], \"images\" : [ { \"width\" : 4, \"height\" : 1 }, { \"width\" : 4, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 2, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 7, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 5, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 9, \"hashtag\" : \"hashtag\" }, \"last_viewed_at\" : 5, \"id\" : \"id\", \"reply_count\" : 6, \"participants\" : [ { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 } ], \"images\" : [ { \"width\" : 4, \"height\" : 1 }, { \"width\" : 4, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 2, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 7, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 5, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 9, \"hashtag\" : \"hashtag\" }, { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 4, \"id\" : \"id\", \"create_at\" : 3 } ], \"images\" : [ { \"width\" : 4, \"height\" : 1 }, { \"width\" : 4, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 1, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 1, \"name\" : \"name\", \"width\" : 6, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 7, \"height\" : 7 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 9 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 5 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 2, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 7, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 5, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 9, \"hashtag\" : \"hashtag\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users : Get users
     * Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
     *
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of users per page. There is a maximum limit of 200 users per page. (optional, default to 60)
     * @param inTeam The ID of the team to get users for. (optional)
     * @param notInTeam The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)
     * @param inChannel The ID of the channel to get users for. (optional)
     * @param notInChannel The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)
     * @param inGroup The ID of the group to get users for. Must have &#x60;manage_system&#x60; permission. (optional)
     * @param groupConstrained When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)
     * @param withoutTeam Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)
     * @param active Whether or not to list only users that are active. This option cannot be used along with the &#x60;inactive&#x60; option. (optional)
     * @param inactive Whether or not to list only users that are deactivated. This option cannot be used along with the &#x60;active&#x60; option. (optional)
     * @param role Returns users that have this role. (optional)
     * @param sort Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7 ##### &#x60;in_group&#x60; Can be \&quot;\&quot;, \&quot;display_name\&quot;. When left blank, sorting is done by username. &#x60;display_name&#x60; will sort alphabetically by user&#39;s display name. __Minimum server version__: 7.7  (optional)
     * @param roles Comma separated string used to filter users based on any of the specified system roles  Example: &#x60;?roles&#x3D;system_admin,system_user&#x60; will return users that are either system admins or system users  __Minimum server version__: 5.26  (optional)
     * @param channelRoles Comma separated string used to filter users based on any of the specified channel roles, can only be used in conjunction with &#x60;in_channel&#x60;  Example: &#x60;?in_channel&#x3D;4eb6axxw7fg3je5iyasnfudc5y&amp;channel_roles&#x3D;channel_user&#x60; will return users that are only channel users and not admins or guests  __Minimum server version__: 5.26  (optional)
     * @param teamRoles Comma separated string used to filter users based on any of the specified team roles, can only be used in conjunction with &#x60;in_team&#x60;  Example: &#x60;?in_team&#x3D;4eb6axxw7fg3je5iyasnfudc5y&amp;team_roles&#x3D;team_user&#x60; will return users that are only team users and not admins or guests  __Minimum server version__: 5.26  (optional)
     * @return User page retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Get users",
        description = "Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the `sort` query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User page retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users",
        produces = { "application/json" }
    )
    default ResponseEntity<List<User>> getUsers(
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of users per page. There is a maximum limit of 200 users per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage,
        @Parameter(name = "in_team", description = "The ID of the team to get users for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "in_team", required = false) String inTeam,
        @Parameter(name = "not_in_team", description = "The ID of the team to exclude users for. Must not be used with \"in_team\" query parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "not_in_team", required = false) String notInTeam,
        @Parameter(name = "in_channel", description = "The ID of the channel to get users for.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "in_channel", required = false) String inChannel,
        @Parameter(name = "not_in_channel", description = "The ID of the channel to exclude users for. Must be used with \"in_channel\" query parameter.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "not_in_channel", required = false) String notInChannel,
        @Parameter(name = "in_group", description = "The ID of the group to get users for. Must have `manage_system` permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "in_group", required = false) String inGroup,
        @Parameter(name = "group_constrained", description = "When used with `not_in_channel` or `not_in_team`, returns only the users that are allowed to join the channel or team based on its group constrains.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "group_constrained", required = false) Boolean groupConstrained,
        @Parameter(name = "without_team", description = "Whether or not to list users that are not on any team. This option takes precendence over `in_team`, `in_channel`, and `not_in_channel`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "without_team", required = false) Boolean withoutTeam,
        @Parameter(name = "active", description = "Whether or not to list only users that are active. This option cannot be used along with the `inactive` option.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) Boolean active,
        @Parameter(name = "inactive", description = "Whether or not to list only users that are deactivated. This option cannot be used along with the `active` option.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "inactive", required = false) Boolean inactive,
        @Parameter(name = "role", description = "Returns users that have this role.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "role", required = false) String role,
        @Parameter(name = "sort", description = "Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### `in_team` Can be \"\", \"last_activity_at\" or \"create_at\". When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### `in_channel` Can be \"\", \"status\". When left blank, sorting is done by username. `status` will sort by User's current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7 ##### `in_group` Can be \"\", \"display_name\". When left blank, sorting is done by username. `display_name` will sort alphabetically by user's display name. __Minimum server version__: 7.7 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) String sort,
        @Parameter(name = "roles", description = "Comma separated string used to filter users based on any of the specified system roles  Example: `?roles=system_admin,system_user` will return users that are either system admins or system users  __Minimum server version__: 5.26 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "roles", required = false) String roles,
        @Parameter(name = "channel_roles", description = "Comma separated string used to filter users based on any of the specified channel roles, can only be used in conjunction with `in_channel`  Example: `?in_channel=4eb6axxw7fg3je5iyasnfudc5y&channel_roles=channel_user` will return users that are only channel users and not admins or guests  __Minimum server version__: 5.26 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "channel_roles", required = false) String channelRoles,
        @Parameter(name = "team_roles", description = "Comma separated string used to filter users based on any of the specified team roles, can only be used in conjunction with `in_team`  Example: `?in_team=4eb6axxw7fg3je5iyasnfudc5y&team_roles=team_user` will return users that are only team users and not admins or guests  __Minimum server version__: 5.26 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team_roles", required = false) String teamRoles
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/group_channels : Get users by group channels ids
     * Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
     *
     * @param requestBody List of group channel ids (required)
     * @return User list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     */
    @Operation(
        operationId = "getUsersByGroupChannelIds",
        summary = "Get users by group channels ids",
        description = "Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User list retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUsersByGroupChannelIds200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/group_channels",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<GetUsersByGroupChannelIds200Response> getUsersByGroupChannelIds(
        @Parameter(name = "request_body", description = "List of group channel ids", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"<CHANNEL_ID>\" : [ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/ids : Get users by ids
     * Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
     *
     * @param requestBody List of user ids (required)
     * @param since Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)
     * @return User list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     */
    @Operation(
        operationId = "getUsersByIds",
        summary = "Get users by ids",
        description = "Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/ids",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<User>> getUsersByIds(
        @Parameter(name = "request_body", description = "List of user ids", required = true) @Valid @RequestBody List<String> requestBody,
        @Parameter(name = "since", description = "Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14 ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) Integer since
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/usernames : Get users by usernames
     * Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
     *
     * @param requestBody List of usernames (required)
     * @return User list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     */
    @Operation(
        operationId = "getUsersByUsernames",
        summary = "Get users by usernames",
        description = "Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/usernames",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<User>> getUsersByUsernames(
        @Parameter(name = "request_body", description = "List of usernames", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/login : Login to Mattermost server
     * ##### Permissions No permission required 
     *
     * @param loginRequest User authentication object (required)
     * @return User login successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "login",
        summary = "Login to Mattermost server",
        description = "##### Permissions No permission required ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User login successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> login(
        @Parameter(name = "LoginRequest", description = "User authentication object", required = true) @Valid @RequestBody LoginRequest loginRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/login/cws : Auto-Login to Mattermost server using CWS token
     * CWS stands for Customer Web Server which is the cloud service used to manage cloud instances. ##### Permissions A Cloud license is required 
     *
     * @param loginByCwsTokenRequest User authentication object (required)
     * @return Login successful, it&#39;ll redirect to login page to perform the autologin (status code 302)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "loginByCwsToken",
        summary = "Auto-Login to Mattermost server using CWS token",
        description = "CWS stands for Customer Web Server which is the cloud service used to manage cloud instances. ##### Permissions A Cloud license is required ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "302", description = "Login successful, it'll redirect to login page to perform the autologin"),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/login/cws",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> loginByCwsToken(
        @Parameter(name = "LoginByCwsTokenRequest", description = "User authentication object", required = true) @Valid @RequestBody LoginByCwsTokenRequest loginByCwsTokenRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/logout : Logout from the Mattermost server
     * ##### Permissions An active session is required 
     *
     * @return User logout successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "logout",
        summary = "Logout from the Mattermost server",
        description = "##### Permissions An active session is required ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User logout successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/logout",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> logout(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/migrate_auth/ldap : Migrate user accounts authentication type to LDAP.
     * Migrates accounts from one authentication provider to another. For example, you can upgrade your authentication provider from email to LDAP. __Minimum server version__: 5.28 ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param migrateAuthToLdapRequest  (optional)
     * @return Successfully migrated authentication type to LDAP. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "migrateAuthToLdap",
        summary = "Migrate user accounts authentication type to LDAP.",
        description = "Migrates accounts from one authentication provider to another. For example, you can upgrade your authentication provider from email to LDAP. __Minimum server version__: 5.28 ##### Permissions Must have `manage_system` permission. ",
        tags = { "users", "migrate", "authentication", "LDAP" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully migrated authentication type to LDAP."),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/migrate_auth/ldap",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> migrateAuthToLdap(
        @Parameter(name = "MigrateAuthToLdapRequest", description = "") @Valid @RequestBody(required = false) MigrateAuthToLdapRequest migrateAuthToLdapRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/migrate_auth/saml : Migrate user accounts authentication type to SAML.
     * Migrates accounts from one authentication provider to another. For example, you can upgrade your authentication provider from email to SAML. __Minimum server version__: 5.28 ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param migrateAuthToSamlRequest  (optional)
     * @return Successfully migrated authentication type to LDAP. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "migrateAuthToSaml",
        summary = "Migrate user accounts authentication type to SAML.",
        description = "Migrates accounts from one authentication provider to another. For example, you can upgrade your authentication provider from email to SAML. __Minimum server version__: 5.28 ##### Permissions Must have `manage_system` permission. ",
        tags = { "users", "migrate", "authentication", "SAML" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully migrated authentication type to LDAP."),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/migrate_auth/saml",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> migrateAuthToSaml(
        @Parameter(name = "MigrateAuthToSamlRequest", description = "") @Valid @RequestBody(required = false) MigrateAuthToSamlRequest migrateAuthToSamlRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/patch : Patch a user
     * Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param patchUserRequest User object that is to be updated (required)
     * @return User patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "patchUser",
        summary = "Patch a user",
        description = "Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> patchUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "PatchUserRequest", description = "User object that is to be updated", required = true) @Valid @RequestBody PatchUserRequest patchUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/users : Permanent delete all users
     * Permanently deletes all users and all their related information, including posts.  __Minimum server version__: 5.26.0  __Local mode only__: This endpoint is only available through [local mode](https://docs.mattermost.com/administration/mmctl-cli-tool.html#local-mode). 
     *
     * @return Delete request was successful (status code 200)
     */
    @Operation(
        operationId = "permanentDeleteAllUsers",
        summary = "Permanent delete all users",
        description = "Permanently deletes all users and all their related information, including posts.  __Minimum server version__: 5.26.0  __Local mode only__: This endpoint is only available through [local mode](https://docs.mattermost.com/administration/mmctl-cli-tool.html#local-mode). ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Delete request was successful")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/users"
    )
    default ResponseEntity<Void> permanentDeleteAllUsers(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/promote : Promote a guest to user
     * Convert a guest into a regular user. This will convert the guest into a user for the whole system while retaining any team and channel memberships and automatically joining them to the default channels.  __Minimum server version__: 5.16  ##### Permissions Must be logged in as the user or have the &#x60;promote_guest&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return Guest successfully promoted (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "promoteGuestToUser",
        summary = "Promote a guest to user",
        description = "Convert a guest into a regular user. This will convert the guest into a user for the whole system while retaining any team and channel memberships and automatically joining them to the default channels.  __Minimum server version__: 5.16  ##### Permissions Must be logged in as the user or have the `promote_guest` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Guest successfully promoted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/promote",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> promoteGuestToUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/typing : Publish a user typing websocket event.
     * Notify users in the given channel via websocket that the given user is typing. __Minimum server version__: 5.26 ##### Permissions Must have &#x60;manage_system&#x60; permission to publish for any user other than oneself. 
     *
     * @param userId User GUID (required)
     * @param publishUserTypingRequest  (optional)
     * @return User typing websocket event accepted for publishing. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "publishUserTyping",
        summary = "Publish a user typing websocket event.",
        description = "Notify users in the given channel via websocket that the given user is typing. __Minimum server version__: 5.26 ##### Permissions Must have `manage_system` permission to publish for any user other than oneself. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User typing websocket event accepted for publishing."),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/typing",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> publishUserTyping(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "PublishUserTypingRequest", description = "") @Valid @RequestBody(required = false) PublishUserTypingRequest publishUserTypingRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/terms_of_service : Records user action when they accept or decline custom terms of service
     * Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
     *
     * @param userId User GUID (required)
     * @param registerTermsOfServiceActionRequest terms of service details (required)
     * @return Terms of service action recorded successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "registerTermsOfServiceAction",
        summary = "Records user action when they accept or decline custom terms of service",
        description = "Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user's last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. ",
        tags = { "users", "terms of service" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Terms of service action recorded successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/terms_of_service",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> registerTermsOfServiceAction(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "RegisterTermsOfServiceActionRequest", description = "terms of service details", required = true) @Valid @RequestBody RegisterTermsOfServiceActionRequest registerTermsOfServiceActionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/password/reset : Reset password
     * Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
     *
     * @param resetPasswordRequest  (required)
     * @return User password update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "resetPassword",
        summary = "Reset password",
        description = "Update the password for a user using a one-use, timed recovery code tied to the user's account. Only works for non-SSO users. ##### Permissions No permissions required. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User password update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/password/reset",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> resetPassword(
        @Parameter(name = "ResetPasswordRequest", description = "", required = true) @Valid @RequestBody ResetPasswordRequest resetPasswordRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/sessions/revoke/all : Revoke all active sessions for a user
     * Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
     *
     * @param userId User GUID (required)
     * @return User sessions revoked successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "revokeAllSessions",
        summary = "Revoke all active sessions for a user",
        description = "Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. __Minimum server version__: 4.4 ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User sessions revoked successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/sessions/revoke/all",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> revokeAllSessions(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/sessions/revoke : Revoke a user session
     * Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param revokeSessionRequest  (required)
     * @return User session revoked successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "revokeSession",
        summary = "Revoke a user session",
        description = "Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User session revoked successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/sessions/revoke",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> revokeSession(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "RevokeSessionRequest", description = "", required = true) @Valid @RequestBody RevokeSessionRequest revokeSessionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/sessions/revoke/all : Revoke all sessions from all users.
     * For any session currently on the server (including admin) it will be revoked. Clients will be notified to log out users.  __Minimum server version__: 5.14  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @return Sessions successfully revoked. (status code 200)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "revokeSessionsFromAllUsers",
        summary = "Revoke all sessions from all users.",
        description = "For any session currently on the server (including admin) it will be revoked. Clients will be notified to log out users.  __Minimum server version__: 5.14  ##### Permissions Must have `manage_system` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Sessions successfully revoked."),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/sessions/revoke/all",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> revokeSessionsFromAllUsers(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/tokens/revoke : Revoke a user access token
     * Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param revokeUserAccessTokenRequest  (required)
     * @return User access token revoke successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "revokeUserAccessToken",
        summary = "Revoke a user access token",
        description = "Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have `revoke_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User access token revoke successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/tokens/revoke",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> revokeUserAccessToken(
        @Parameter(name = "RevokeUserAccessTokenRequest", description = "", required = true) @Valid @RequestBody RevokeUserAccessTokenRequest revokeUserAccessTokenRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/tokens/search : Search tokens
     * Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param searchUserAccessTokensRequest Search criteria (required)
     * @return Personal access token search successful (status code 200)
     */
    @Operation(
        operationId = "searchUserAccessTokens",
        summary = "Search tokens",
        description = "Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have `manage_system` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Personal access token search successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserAccessTokenSanitized.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/tokens/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<UserAccessTokenSanitized>> searchUserAccessTokens(
        @Parameter(name = "SearchUserAccessTokensRequest", description = "Search criteria", required = true) @Valid @RequestBody SearchUserAccessTokensRequest searchUserAccessTokensRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"is_active\" : true, \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\" }, { \"is_active\" : true, \"user_id\" : \"user_id\", \"description\" : \"description\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/search : Search users
     * Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
     *
     * @param searchUsersRequest Search criteria (required)
     * @return User list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "searchUsers",
        summary = "Search users",
        description = "Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and `read_channel` and/or `view_team` permissions for any channels or teams specified in the request body. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<User>> searchUsers(
        @Parameter(name = "SearchUsersRequest", description = "Search criteria", required = true) @Valid @RequestBody SearchUsersRequest searchUsersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }, { \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/password/reset/send : Send password reset email
     * Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
     *
     * @param sendPasswordResetEmailRequest  (required)
     * @return Email sent if account exists (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "sendPasswordResetEmail",
        summary = "Send password reset email",
        description = "Send an email containing a link for resetting the user's password. The link will contain a one-use, timed recovery code tied to the user's account. Only works for non-SSO users. ##### Permissions No permissions required. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Email sent if account exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/password/reset/send",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> sendPasswordResetEmail(
        @Parameter(name = "SendPasswordResetEmailRequest", description = "", required = true) @Valid @RequestBody SendPasswordResetEmailRequest sendPasswordResetEmailRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/email/verify/send : Send verification email
     * Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
     *
     * @param sendVerificationEmailRequest  (required)
     * @return Email send successful if email exists (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     */
    @Operation(
        operationId = "sendVerificationEmail",
        summary = "Send verification email",
        description = "Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Email send successful if email exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/email/verify/send",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> sendVerificationEmail(
        @Parameter(name = "SendVerificationEmailRequest", description = "", required = true) @Valid @RequestBody SendVerificationEmailRequest sendVerificationEmailRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/users/{user_id}/image : Delete user&#39;s profile image
     * Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
     *
     * @param userId User GUID (required)
     * @return Profile image reset successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "setDefaultProfileImage",
        summary = "Delete user's profile image",
        description = "Delete user's profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. __Minimum server version__: 5.5 ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Profile image reset successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/users/{user_id}/image",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> setDefaultProfileImage(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/image : Set user&#39;s profile image
     * Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param image The image to be uploaded (required)
     * @return Profile image set successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "setProfileImage",
        summary = "Set user's profile image",
        description = "Set a user's profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Profile image set successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/image",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<StatusOK> setProfileImage(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "image", description = "The image to be uploaded", required = true) @RequestPart(value = "image", required = true) MultipartFile image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/login/switch : Switch login method
     * Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
     *
     * @param switchAccountTypeRequest  (required)
     * @return Login method switch or request successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "switchAccountType",
        summary = "Switch login method",
        description = "Switch a user's login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify `current_service`, `new_service`, `email` and `password`.  To switch from OAuth2/SAML to email, specify `current_service`, `new_service`, `email` and `new_password`.  To switch from email to LDAP/AD, specify `current_service`, `new_service`, `email`, `password`, `ldap_ip` and `new_password` (this is the user's LDAP password).  To switch from LDAP/AD to email, specify `current_service`, `new_service`, `ldap_ip`, `password` (this is the user's LDAP password), `email`  and `new_password`.  Additionally, specify `mfa_code` when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login method switch or request successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SwitchAccountType200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/login/switch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SwitchAccountType200Response> switchAccountType(
        @Parameter(name = "SwitchAccountTypeRequest", description = "", required = true) @Valid @RequestBody SwitchAccountTypeRequest switchAccountTypeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"follow_link\" : \"follow_link\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id} : Update a user
     * Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param updateUserRequest User object that is to be updated (required)
     * @return User update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update a user",
        description = "Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> updateUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateUserRequest", description = "User object that is to be updated", required = true) @Valid @RequestBody UpdateUserRequest updateUserRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/active : Update user active status
     * Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
     *
     * @param userId User GUID (required)
     * @param updateUserActiveRequest Use &#x60;true&#x60; to set the user active, &#x60;false&#x60; for inactive (required)
     * @return User active status update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "updateUserActive",
        summary = "Update user active status",
        description = "Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with `manage_system` permission can activate or deactivate a user. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User active status update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/active",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateUserActive(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateUserActiveRequest", description = "Use `true` to set the user active, `false` for inactive", required = true) @Valid @RequestBody UpdateUserActiveRequest updateUserActiveRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/auth : Update a user&#39;s authentication method
     * Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param userAuthData  (required)
     * @return User auth update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "updateUserAuth",
        summary = "Update a user's authentication method",
        description = "Updates a user's authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User auth update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserAuthData.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/auth",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserAuthData> updateUserAuth(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UserAuthData", description = "", required = true) @Valid @RequestBody UserAuthData userAuthData
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"auth_service\" : \"auth_service\", \"auth_data\" : \"auth_data\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/mfa : Update a user&#39;s MFA
     * Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param updateUserMfaRequest  (required)
     * @return User MFA update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "updateUserMfa",
        summary = "Update a user's MFA",
        description = "Activates multi-factor authentication for the user if `activate` is true and a valid `code` is provided. If activate is false, then `code` is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the `edit_other_users` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User MFA update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/mfa",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateUserMfa(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateUserMfaRequest", description = "", required = true) @Valid @RequestBody UpdateUserMfaRequest updateUserMfaRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/password : Update a user&#39;s password
     * Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param updateUserPasswordRequest  (required)
     * @return User password update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "updateUserPassword",
        summary = "Update a user's password",
        description = "Update a user's password. New password must meet password policy set by server configuration. Current password is required if you're updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have `manage_system` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User password update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateUserPassword(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateUserPasswordRequest", description = "", required = true) @Valid @RequestBody UpdateUserPasswordRequest updateUserPasswordRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/roles : Update a user&#39;s roles
     * Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param updateUserRolesRequest Space-delimited system roles to assign to the user (required)
     * @return User roles update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "updateUserRoles",
        summary = "Update a user's roles",
        description = "Update a user's system-level roles. Valid user roles are \"system_user\", \"system_admin\" or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the `manage_roles` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User roles update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateUserRoles(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateUserRolesRequest", description = "Space-delimited system roles to assign to the user", required = true) @Valid @RequestBody UpdateUserRolesRequest updateUserRolesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/email/verify : Verify user email
     * Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
     *
     * @param verifyUserEmailRequest  (required)
     * @return User email verification successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     */
    @Operation(
        operationId = "verifyUserEmail",
        summary = "Verify user email",
        description = "Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User email verification successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/email/verify",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> verifyUserEmail(
        @Parameter(name = "VerifyUserEmailRequest", description = "", required = true) @Valid @RequestBody VerifyUserEmailRequest verifyUserEmailRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/email/verify/member : Verify user email by ID
     * Verify the email used by a user without a token.  __Minimum server version__: 5.24  ##### Permissions  Must have &#x60;manage_system&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return User email verification successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "verifyUserEmailWithoutToken",
        summary = "Verify user email by ID",
        description = "Verify the email used by a user without a token.  __Minimum server version__: 5.24  ##### Permissions  Must have `manage_system` permission. ",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User email verification successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/email/verify/member",
        produces = { "application/json" }
    )
    default ResponseEntity<User> verifyUserEmailWithoutToken(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"email_verified\" : true, \"auth_service\" : \"auth_service\", \"failed_attempts\" : 2, \"timezone\" : { \"manualTimezone\" : \"manualTimezone\", \"useAutomaticTimezone\" : true, \"automaticTimezone\" : \"automaticTimezone\" }, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mention_keys\" : \"mention_keys\", \"channel\" : \"channel\", \"desktop_sound\" : \"desktop_sound\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"push\" : \"push\" }, \"mfa_active\" : true, \"last_name\" : \"last_name\", \"last_password_update\" : 5, \"locale\" : \"locale\", \"props\" : \"{}\", \"last_picture_update\" : 5, \"update_at\" : 6, \"nickname\" : \"nickname\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"terms_of_service_id\" : \"terms_of_service_id\", \"first_name\" : \"first_name\", \"terms_of_service_create_at\" : 7, \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
