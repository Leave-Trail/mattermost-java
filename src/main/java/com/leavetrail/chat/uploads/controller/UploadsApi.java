/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leavetrail.chat.uploads.controller;

import com.leavetrail.chat.core.dto.AppError;
import com.leavetrail.chat.uploads.dto.CreateUploadRequest;
import com.leavetrail.chat.uploads.dto.FileInfo;
import com.leavetrail.chat.uploads.dto.UploadSession;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import com.leavetrail.chat.core.util.ApiUtil;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-22T12:29:10.272103+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "uploads", description = "Endpoints for creating and performing file uploads.")
public interface UploadsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v4/uploads : Create an upload
     * Creates a new upload session.  __Minimum server version__: 5.28 ##### Permissions Must have &#x60;upload_file&#x60; permission. 
     *
     * @param createUploadRequest  (required)
     * @return Upload creation successful. (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Content too large (status code 413)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "createUpload",
        summary = "Create an upload",
        description = "Creates a new upload session.  __Minimum server version__: 5.28 ##### Permissions Must have `upload_file` permission. ",
        tags = { "uploads" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Upload creation successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UploadSession.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "413", description = "Content too large", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/uploads",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UploadSession> createUpload(
        @Parameter(name = "CreateUploadRequest", description = "", required = true) @Valid @RequestBody CreateUploadRequest createUploadRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"filename\" : \"filename\", \"user_id\" : \"user_id\", \"id\" : \"id\", \"type\" : \"attachment\", \"create_at\" : 0, \"channel_id\" : \"channel_id\", \"file_offset\" : 1, \"file_size\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/uploads/{upload_id} : Get an upload session
     * Gets an upload session that has been previously created.  ##### Permissions Must be logged in as the user who created the upload session. 
     *
     * @param uploadId The ID of the upload session to get. (required)
     * @return Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getUpload",
        summary = "Get an upload session",
        description = "Gets an upload session that has been previously created.  ##### Permissions Must be logged in as the user who created the upload session. ",
        tags = { "uploads" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/uploads/{upload_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getUpload(
        @Parameter(name = "upload_id", description = "The ID of the upload session to get.", required = true, in = ParameterIn.PATH) @PathVariable("upload_id") String uploadId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/uploads/{upload_id} : Perform a file upload
     * Starts or resumes a file upload.   To resume an existing (incomplete) upload, data should be sent starting from the offset specified in the upload session object.  The request body can be in one of two formats: - Binary file content streamed in request&#39;s body - multipart/form-data  ##### Permissions Must be logged in as the user who created the upload session. 
     *
     * @param uploadId The ID of the upload session the data belongs to. (required)
     * @return Upload successful (status code 201)
     *         or Upload incomplete (status code 204)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Content too large (status code 413)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "uploadData",
        summary = "Perform a file upload",
        description = "Starts or resumes a file upload.   To resume an existing (incomplete) upload, data should be sent starting from the offset specified in the upload session object.  The request body can be in one of two formats: - Binary file content streamed in request's body - multipart/form-data  ##### Permissions Must be logged in as the user who created the upload session. ",
        tags = { "uploads" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Upload successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FileInfo.class))
            }),
            @ApiResponse(responseCode = "204", description = "Upload incomplete"),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "413", description = "Content too large", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/uploads/{upload_id}",
        produces = { "application/json" },
        consumes = { "application/x-www-form-urlencoded" }
    )
    default ResponseEntity<FileInfo> uploadData(
        @Parameter(name = "upload_id", description = "The ID of the upload session the data belongs to.", required = true, in = ParameterIn.PATH) @PathVariable("upload_id") String uploadId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 5, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 6, \"name\" : \"name\", \"width\" : 5, \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"height\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
