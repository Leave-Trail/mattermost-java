/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leavetrail.chat.teams.controller;

import java.util.List;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import com.leavetrail.chat.core.dto.AppError;
import com.leavetrail.chat.core.dto.StatusOK;
import com.leavetrail.chat.core.util.ApiUtil;
import com.leavetrail.chat.teams.dto.AddTeamMemberRequest;
import com.leavetrail.chat.teams.dto.GetTeamInviteInfo200Response;
import com.leavetrail.chat.teams.dto.ImportTeam200Response;
import com.leavetrail.chat.teams.dto.InviteGuestsToTeamRequest;
import com.leavetrail.chat.teams.dto.PatchTeamRequest;
import com.leavetrail.chat.teams.dto.SearchTeams200Response;
import com.leavetrail.chat.teams.dto.SearchTeamsRequest;
import com.leavetrail.chat.teams.dto.Team;
import com.leavetrail.chat.teams.dto.TeamExists;
import com.leavetrail.chat.teams.dto.TeamMember;
import com.leavetrail.chat.teams.dto.TeamStats;
import com.leavetrail.chat.teams.dto.TeamUnread;
import com.leavetrail.chat.teams.dto.UpdateTeamMemberRolesRequest;
import com.leavetrail.chat.teams.dto.UpdateTeamMemberSchemeRolesRequest;
import com.leavetrail.chat.teams.dto.UpdateTeamPrivacyRequest;
import com.leavetrail.chat.teams.dto.UpdateTeamRequest;
import com.leavetrail.chat.teams.dto.UpdateTeamSchemeRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-20T15:06:46.357824+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "teams", description = "Endpoints for creating, getting and interacting with teams.")
public class TeamsApiController {

    Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v4/teams/{team_id}/members : Add user to team
     * Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param addTeamMemberRequest  (required)
     * @return Team member creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "addTeamMember",
        summary = "Add user to team",
        description = "Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the `add_user_to_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Team member creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamMember.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TeamMember> addTeamMember(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "AddTeamMemberRequest", description = "", required = true) @Valid @RequestBody AddTeamMemberRequest addTeamMemberRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/members/invite : Add user to team from invite
     * Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
     *
     * @param token Token id from the invitation (required)
     * @return Team member creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "addTeamMemberFromInvite",
        summary = "Add user to team from invite",
        description = "Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Team member creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamMember.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/members/invite",
        produces = { "application/json" }
    )
    ResponseEntity<TeamMember> addTeamMemberFromInvite(
        @NotNull @Parameter(name = "token", description = "Token id from the invitation", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "token", required = true) String token
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/members/batch : Add multiple users to team
     * Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param teamMember  (required)
     * @param graceful Instead of aborting the operation if a user cannot be added, return an arrray that will contain both the success and added members and the ones with error, in form of &#x60;[{\&quot;member\&quot;: {...}, \&quot;user_id\&quot;, \&quot;...\&quot;, \&quot;error\&quot;: {...}}]&#x60; (optional)
     * @return Team members created successfully. (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "addTeamMembers",
        summary = "Add multiple users to team",
        description = "Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the `add_user_to_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Team members created successfully.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamMember.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/members/batch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<TeamMember>> addTeamMembers(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "TeamMember", description = "", required = true) @Valid @RequestBody List<TeamMember> teamMember,
        @Parameter(name = "graceful", description = "Instead of aborting the operation if a user cannot be added, return an arrray that will contain both the success and added members and the ones with error, in form of `[{\"member\": {...}, \"user_id\", \"...\", \"error\": {...}}]`", in = ParameterIn.QUERY) @Valid @RequestParam(value = "graceful", required = false) Boolean graceful
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }, { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id} : Get a team
     * Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @return Team retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTeam",
        summary = "Get a team",
        description = "Get a team on the system. ##### Permissions Must be authenticated and have the `view_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Team.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}",
        produces = { "application/json" }
    )
    ResponseEntity<Team> getTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/name/{name} : Get a team by name
     * Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
     *
     * @param name Team Name (required)
     * @return Team retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTeamByName",
        summary = "Get a team by name",
        description = "Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the `view_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Team.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/name/{name}",
        produces = { "application/json" }
    )
    ResponseEntity<Team> getTeamByName(
        @Parameter(name = "name", description = "Team Name", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/image : Get the team icon
     * Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @return Team icon retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getTeamIcon",
        summary = "Get the team icon",
        description = "Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the `view_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team icon retrieval successful"),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/image",
        produces = { "application/json" }
    )
    ResponseEntity<Void> getTeamIcon(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/invite/{invite_id} : Get invite info for a team
     * Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
     *
     * @param inviteId Invite id for a team (required)
     * @return Team invite info retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     */
    @Operation(
        operationId = "getTeamInviteInfo",
        summary = "Get invite info for a team",
        description = "Get the `name`, `display_name`, `description` and `id` for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team invite info retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetTeamInviteInfo200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/invite/{invite_id}",
        produces = { "application/json" }
    )
    ResponseEntity<GetTeamInviteInfo200Response> getTeamInviteInfo(
        @Parameter(name = "invite_id", description = "Invite id for a team", required = true, in = ParameterIn.PATH) @PathVariable("invite_id") String inviteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"display_name\" : \"display_name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/members/{user_id} : Get a team member
     * Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @return Team member retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTeamMember",
        summary = "Get a team member",
        description = "Get a team member on the system. ##### Permissions Must be authenticated and have the `view_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team member retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamMember.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/members/{user_id}",
        produces = { "application/json" }
    )
    ResponseEntity<TeamMember> getTeamMember(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/members : Get team members
     * Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param page The page to select. (optional, to 0)
     * @param perPage The number of users per page. (optional, to 60)
     * @return Team members retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTeamMembers",
        summary = "Get team members",
        description = "Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the `view_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team members retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamMember.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/members",
        produces = { "application/json" }
    )
    ResponseEntity<List<TeamMember>> getTeamMembers(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of users per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }, { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/members/ids : Get team members by ids
     * Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
     *
     * @param teamId Team GUID (required)
     * @param requestBody List of user ids (required)
     * @return Team members retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getTeamMembersByIds",
        summary = "Get team members by ids",
        description = "Get a list of team members based on a provided array of user ids. ##### Permissions Must have `view_team` permission for the team. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team members retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamMember.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/members/ids",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<TeamMember>> getTeamMembersByIds(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "request_body", description = "List of user ids", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }, { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/members : Get team members for a user
     * Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return Team members retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTeamMembersForUser",
        summary = "Get team members for a user",
        description = "Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the `edit_other_users` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team members retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamMember.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/members",
        produces = { "application/json" }
    )
    ResponseEntity<List<TeamMember>> getTeamMembersForUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true }, { \"user_id\" : \"user_id\", \"roles\" : \"roles\", \"explicit_roles\" : \"explicit_roles\", \"delete_at\" : 0, \"scheme_admin\" : true, \"team_id\" : \"team_id\", \"scheme_user\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/stats : Get a team stats
     * Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @return Team stats retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTeamStats",
        summary = "Get a team stats",
        description = "Get a team stats on the system. ##### Permissions Must be authenticated and have the `view_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team stats retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamStats.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/stats",
        produces = { "application/json" }
    )
    ResponseEntity<TeamStats> getTeamStats(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_member_count\" : 0, \"team_id\" : \"team_id\", \"active_member_count\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/{team_id}/unread : Get unreads for a team
     * Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
     *
     * @param userId User GUID (required)
     * @param teamId Team GUID (required)
     * @return Team unread count retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getTeamUnread",
        summary = "Get unreads for a team",
        description = "Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have `edit_other_users` permission and have `view_team` permission for the team. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team unread count retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamUnread.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/{team_id}/unread",
        produces = { "application/json" }
    )
    ResponseEntity<TeamUnread> getTeamUnread(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"team_id\" : \"team_id\", \"mention_count\" : 6, \"msg_count\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams : Get a user&#39;s teams
     * Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @return Team list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getTeamsForUser",
        summary = "Get a user's teams",
        description = "Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the `manage_system` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Team.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams",
        produces = { "application/json" }
    )
    ResponseEntity<List<Team>> getTeamsForUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }, { \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/unread : Get team unreads for a user
     * Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
     *
     * @param userId User GUID (required)
     * @param excludeTeam Optional team id to be excluded from the results (required)
     * @param includeCollapsedThreads Boolean to determine whether the collapsed threads should be included or not (optional, to false)
     * @return Team unreads retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getTeamsUnreadForUser",
        summary = "Get team unreads for a user",
        description = "Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team unreads retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TeamUnread.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/unread",
        produces = { "application/json" }
    )
    ResponseEntity<List<TeamUnread>> getTeamsUnreadForUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @NotNull @Parameter(name = "exclude_team", description = "Optional team id to be excluded from the results", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "exclude_team", required = true) String excludeTeam,
        @Parameter(name = "include_collapsed_threads", description = "Boolean to determine whether the collapsed threads should be included or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_collapsed_threads", required = false, defaultValue = "false") Boolean includeCollapsedThreads
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"team_id\" : \"team_id\", \"mention_count\" : 6, \"msg_count\" : 0 }, { \"team_id\" : \"team_id\", \"mention_count\" : 6, \"msg_count\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/import : Import a Team from other application
     * Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param file A file to be uploaded in zip format. (required)
     * @param filesize The size of the zip file to be imported. (required)
     * @param importFrom String that defines from which application the team was exported to be imported into Mattermost. (required)
     * @return JSON object containing a base64 encoded text file of the import logs in its &#x60;results&#x60; property. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "importTeam",
        summary = "Import a Team from other application",
        description = "Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have `permission_import_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "JSON object containing a base64 encoded text file of the import logs in its `results` property.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ImportTeam200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/import",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<ImportTeam200Response> importTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "file", description = "A file to be uploaded in zip format.", required = true) @RequestPart(value = "file", required = true) MultipartFile file,
        @Parameter(name = "filesize", description = "The size of the zip file to be imported.", required = true) @Valid @RequestParam(value = "filesize", required = true) Integer filesize,
        @Parameter(name = "importFrom", description = "String that defines from which application the team was exported to be imported into Mattermost.", required = true) @Valid @RequestParam(value = "importFrom", required = true) String importFrom
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : \"results\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/teams/invites/email : Invalidate active email invitations
     * Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;sysconsole_write_authentication&#x60; permission. 
     *
     * @return Email invites successfully revoked (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "invalidateEmailInvites",
        summary = "Invalidate active email invitations",
        description = "Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have `sysconsole_write_authentication` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Email invites successfully revoked", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/teams/invites/email",
        produces = { "application/json" }
    )
    ResponseEntity<StatusOK> invalidateEmailInvites(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/invite-guests/email : Invite guests to the team by email
     * Invite guests to existing team channels usign the user&#39;s email.  The number of emails that can be sent is rate limited to 20 per hour with a burst of 20 emails. If the rate limit exceeds, the error message contains details on when to retry and when the timer will be reset.  __Minimum server version__: 5.16  ##### Permissions Must have &#x60;invite_guest&#x60; permission for the team. 
     *
     * @param teamId Team GUID (required)
     * @param inviteGuestsToTeamRequest Guests invite information (required)
     * @return Guests invite successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Content too large (status code 413)
     */
    @Operation(
        operationId = "inviteGuestsToTeam",
        summary = "Invite guests to the team by email",
        description = "Invite guests to existing team channels usign the user's email.  The number of emails that can be sent is rate limited to 20 per hour with a burst of 20 emails. If the rate limit exceeds, the error message contains details on when to retry and when the timer will be reset.  __Minimum server version__: 5.16  ##### Permissions Must have `invite_guest` permission for the team. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Guests invite successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "413", description = "Content too large", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/invite-guests/email",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<StatusOK> inviteGuestsToTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "InviteGuestsToTeamRequest", description = "Guests invite information", required = true) @Valid @RequestBody InviteGuestsToTeamRequest inviteGuestsToTeamRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/invite/email : Invite users to the team by email
     * Invite users to the existing team using the user&#39;s email.  The number of emails that can be sent is rate limited to 20 per hour with a burst of 20 emails. If the rate limit exceeds, the error message contains details on when to retry and when the timer will be reset. ##### Permissions Must have &#x60;invite_user&#x60; and &#x60;add_user_to_team&#x60; permissions for the team. 
     *
     * @param teamId Team GUID (required)
     * @param requestBody List of user&#39;s email (required)
     * @return Users invite successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Content too large (status code 413)
     */
    @Operation(
        operationId = "inviteUsersToTeam",
        summary = "Invite users to the team by email",
        description = "Invite users to the existing team using the user's email.  The number of emails that can be sent is rate limited to 20 per hour with a burst of 20 emails. If the rate limit exceeds, the error message contains details on when to retry and when the timer will be reset. ##### Permissions Must have `invite_user` and `add_user_to_team` permissions for the team. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Users invite successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "413", description = "Content too large", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/invite/email",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<StatusOK> inviteUsersToTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "request_body", description = "List of user's email", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/teams/{team_id}/patch : Patch a team
     * Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param patchTeamRequest Team object that is to be updated (required)
     * @return team patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "patchTeam",
        summary = "Patch a team",
        description = "Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the `manage_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "team patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Team.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/teams/{team_id}/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Team> patchTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "PatchTeamRequest", description = "Team object that is to be updated", required = true) @Valid @RequestBody PatchTeamRequest patchTeamRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/regenerate_invite_id : Regenerate the Invite ID from a Team
     * Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @return Team Invite ID regenerated (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "regenerateTeamInviteId",
        summary = "Regenerate the Invite ID from a Team",
        description = "Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the `manage_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team Invite ID regenerated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Team.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/regenerate_invite_id",
        produces = { "application/json" }
    )
    ResponseEntity<Team> regenerateTeamInviteId(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/teams/{team_id}/image : Remove the team icon
     * Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @return Team icon successfully remove (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "removeTeamIcon",
        summary = "Remove the team icon",
        description = "Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the `manage_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team icon successfully remove", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/teams/{team_id}/image",
        produces = { "application/json" }
    )
    ResponseEntity<StatusOK> removeTeamIcon(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/teams/{team_id}/members/{user_id} : Remove user from team
     * Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @return Team member deletion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "removeTeamMember",
        summary = "Remove user from team",
        description = "Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the `remove_user_from_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team member deletion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/teams/{team_id}/members/{user_id}",
        produces = { "application/json" }
    )
    ResponseEntity<StatusOK> removeTeamMember(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/restore : Restore a team
     * Restore a team that was previously soft deleted.  __Minimum server version__: 5.24  ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @return Team restore successful (status code 200)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "restoreTeam",
        summary = "Restore a team",
        description = "Restore a team that was previously soft deleted.  __Minimum server version__: 5.24  ##### Permissions Must have the `manage_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team restore successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Team.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/restore",
        produces = { "application/json" }
    )
    ResponseEntity<Team> restoreTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/search : Search teams
     * Search teams based on search term and options provided in the request body.  ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
     *
     * @param searchTeamsRequest Search criteria (required)
     * @return Paginated teams response. (Note that the non-paginated response—returned if the request body does not contain both &#x60;page&#x60; and &#x60;per_page&#x60; fields—is a simple array of teams.) (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "searchTeams",
        summary = "Search teams",
        description = "Search teams based on search term and options provided in the request body.  ##### Permissions Logged in user only shows open teams Logged in user with \"manage_system\" permission shows all teams ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Paginated teams response. (Note that the non-paginated response—returned if the request body does not contain both `page` and `per_page` fields—is a simple array of teams.)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchTeams200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<SearchTeams200Response> searchTeams(
        @Parameter(name = "SearchTeamsRequest", description = "Search criteria", required = true) @Valid @RequestBody SearchTeamsRequest searchTeamsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"teams\" : [ { \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }, { \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" } ], \"total_count\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/image : Sets the team icon
     * Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param image The image to be uploaded (required)
     * @return Team icon successfully set (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "setTeamIcon",
        summary = "Sets the team icon",
        description = "Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the `manage_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team icon successfully set", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/image",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<StatusOK> setTeamIcon(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "image", description = "The image to be uploaded", required = true) @RequestPart(value = "image", required = true) MultipartFile image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/teams/{team_id} : Delete a team
     * Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param permanent Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, to false)
     * @return Team deletion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "softDeleteTeam",
        summary = "Delete a team",
        description = "Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature `ServiceSettings.EnableAPITeamDeletion` must be set to `true` in the server's configuration. ##### Permissions Must have the `manage_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team deletion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/teams/{team_id}",
        produces = { "application/json" }
    )
    ResponseEntity<StatusOK> softDeleteTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "permanent", description = "Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, `ServiceSettings.EnableAPITeamDeletion` must be set to `true` in the server's configuration.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "permanent", required = false, defaultValue = "false") Boolean permanent
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/name/{name}/exists : Check if team exists
     * Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
     *
     * @param name Team Name (required)
     * @return Team retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "teamExists",
        summary = "Check if team exists",
        description = "Check if the team exists based on a team name. ##### Permissions Must be authenticated. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TeamExists.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/name/{name}/exists",
        produces = { "application/json" }
    )
    ResponseEntity<TeamExists> teamExists(
        @Parameter(name = "name", description = "Team Name", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"exists\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/members_minus_group_members : Team members minus group members.
     * Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
     *
     * @param teamId Team GUID (required)
     * @param groupIds A comma-separated list of group ids. (required)
     * @param page The page to select. (optional, to 0)
     * @param perPage The number of users per page. (optional, to 0)
     * @return Successfully returns users specified by the pagination, and the total_count. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "teamMembersMinusGroupMembers",
        summary = "Team members minus group members.",
        description = "Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields `scheme_guest`, `scheme_user`, and `scheme_admin` representing the roles that user has for the given team.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.14 ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully returns users specified by the pagination, and the total_count."),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/members_minus_group_members",
        produces = { "application/json" }
    )
    ResponseEntity<Void> teamMembersMinusGroupMembers(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @NotNull @Parameter(name = "group_ids", description = "A comma-separated list of group ids.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "group_ids", required = true, defaultValue = "") String groupIds,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of users per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "0") Integer perPage
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/teams/{team_id} : Update a team
     * Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param updateTeamRequest Team to update (required)
     * @return Team update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateTeam",
        summary = "Update a team",
        description = "Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the `manage_team` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Team.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/teams/{team_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Team> updateTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "UpdateTeamRequest", description = "Team to update", required = true) @Valid @RequestBody UpdateTeamRequest updateTeamRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/teams/{team_id}/members/{user_id}/roles : Update a team member roles
     * Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param updateTeamMemberRolesRequest Space-delimited team roles to assign to the user (required)
     * @return Team member roles update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateTeamMemberRoles",
        summary = "Update a team member roles",
        description = "Update a team member roles. Valid team roles are \"team_user\", \"team_admin\" or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the `manage_team_roles` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team member roles update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/teams/{team_id}/members/{user_id}/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<StatusOK> updateTeamMemberRoles(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateTeamMemberRolesRequest", description = "Space-delimited team roles to assign to the user", required = true) @Valid @RequestBody UpdateTeamMemberRolesRequest updateTeamMemberRolesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/teams/{team_id}/members/{user_id}/schemeRoles : Update the scheme-derived roles of a team member.
     * Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param updateTeamMemberSchemeRolesRequest Scheme properties. (required)
     * @return Team member&#39;s scheme-derived roles updated successfully. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateTeamMemberSchemeRoles",
        summary = "Update the scheme-derived roles of a team member.",
        description = "Update a team member's scheme_admin/scheme_user properties. Typically this should either be `scheme_admin=false, scheme_user=true` for ordinary team member, or `scheme_admin=true, scheme_user=true` for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the `manage_team_roles` permission. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team member's scheme-derived roles updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/teams/{team_id}/members/{user_id}/schemeRoles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<StatusOK> updateTeamMemberSchemeRoles(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateTeamMemberSchemeRolesRequest", description = "Scheme properties.", required = true) @Valid @RequestBody UpdateTeamMemberSchemeRolesRequest updateTeamMemberSchemeRolesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/teams/{team_id}/privacy : Update teams&#39;s privacy
     * Updates team&#39;s privacy allowing changing a team from Public (open) to Private (invitation only) and back.  __Minimum server version__: 5.24  ##### Permissions &#x60;manage_team&#x60; permission for the team of the team. 
     *
     * @param teamId Team GUID (required)
     * @param updateTeamPrivacyRequest  (required)
     * @return Team conversion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateTeamPrivacy",
        summary = "Update teams's privacy",
        description = "Updates team's privacy allowing changing a team from Public (open) to Private (invitation only) and back.  __Minimum server version__: 5.24  ##### Permissions `manage_team` permission for the team of the team. ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Team conversion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Team.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/teams/{team_id}/privacy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Team> updateTeamPrivacy(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "UpdateTeamPrivacyRequest", description = "", required = true) @Valid @RequestBody UpdateTeamPrivacyRequest updateTeamPrivacyRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invite_id\" : \"invite_id\", \"allowed_domains\" : \"allowed_domains\", \"policy_id\" : \"policy_id\", \"description\" : \"description\", \"display_name\" : \"display_name\", \"type\" : \"type\", \"allow_open_invite\" : true, \"update_at\" : 6, \"name\" : \"name\", \"delete_at\" : 1, \"id\" : \"id\", \"create_at\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/teams/{team_id}/scheme : Set a team&#39;s scheme
     * Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
     *
     * @param teamId Team GUID (required)
     * @param updateTeamSchemeRequest Scheme GUID (required)
     * @return Update team scheme successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "updateTeamScheme",
        summary = "Set a team's scheme",
        description = "Set a team's scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.0 ",
        tags = { "teams" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Update team scheme successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/teams/{team_id}/scheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<StatusOK> updateTeamScheme(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "UpdateTeamSchemeRequest", description = "Scheme GUID", required = true) @Valid @RequestBody UpdateTeamSchemeRequest updateTeamSchemeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
