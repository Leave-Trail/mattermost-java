/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leavetrail.chat.posts.controller;

import com.leavetrail.chat.core.util.ApiUtil;
import com.leavetrail.chat.posts.dto.AppError;
import com.leavetrail.chat.posts.dto.ChannelUnreadAt;
import com.leavetrail.chat.posts.dto.CreatePostEphemeralRequest;
import com.leavetrail.chat.posts.dto.CreatePostRequest;
import com.leavetrail.chat.posts.dto.FileInfo;
import java.util.List;
import com.leavetrail.chat.posts.dto.PatchPostRequest;
import com.leavetrail.chat.posts.dto.Post;
import com.leavetrail.chat.posts.dto.PostAcknowledgement;
import com.leavetrail.chat.posts.dto.PostList;
import com.leavetrail.chat.posts.dto.PostListWithSearchMatches;
import com.leavetrail.chat.posts.dto.SearchPostsRequest;
import com.leavetrail.chat.posts.dto.SetPostReminderRequest;
import com.leavetrail.chat.posts.dto.StatusOK;
import com.leavetrail.chat.posts.dto.UpdatePostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-20T18:55:42.623670+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "posts", description = "Endpoints for creating, getting and interacting with posts.")
public interface PostsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /api/v4/users/{user_id}/posts/{post_id}/ack : Delete a post acknowledgement
     * Delete an acknowledgement form a post that you had previously acknowledged. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.&lt;br/&gt; Must be logged in as the user or have &#x60;edit_other_users&#x60; permission.&lt;br/&gt; The post must have been acknowledged in the previous 5 minutes.  __Minimum server version__: 7.7 
     *
     * @param userId User GUID (required)
     * @param postId Post GUID (required)
     * @return Acknowledgement deleted successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "apiV4UsersUserIdPostsPostIdAckDelete",
        summary = "Delete a post acknowledgement",
        description = "Delete an acknowledgement form a post that you had previously acknowledged. ##### Permissions Must have `read_channel` permission for the channel the post is in.<br/> Must be logged in as the user or have `edit_other_users` permission.<br/> The post must have been acknowledged in the previous 5 minutes.  __Minimum server version__: 7.7 ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Acknowledgement deleted successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/users/{user_id}/posts/{post_id}/ack",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> apiV4UsersUserIdPostsPostIdAckDelete(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/posts : Create a post
     * Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
     *
     * @param createPostRequest Post object to create (required)
     * @param setOnline Whether to set the user status as online or not. (optional)
     * @return Post creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createPost",
        summary = "Create a post",
        description = "Create a new post in a channel. To create the post as a comment on another post, provide `root_id`. ##### Permissions Must have `create_post` permission for the channel the post is being created in. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Post creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/posts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Post> createPost(
        @Parameter(name = "CreatePostRequest", description = "Post object to create", required = true) @Valid @RequestBody CreatePostRequest createPostRequest,
        @Parameter(name = "set_online", description = "Whether to set the user status as online or not.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "set_online", required = false) Boolean setOnline
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/posts/ephemeral : Create a ephemeral post
     * Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
     *
     * @param createPostEphemeralRequest Ephemeral Post object to send (required)
     * @return Post creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createPostEphemeral",
        summary = "Create a ephemeral post",
        description = "Create a new ephemeral post in a channel. ##### Permissions Must have `create_post_ephemeral` permission (currently only given to system admin) ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Post creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/posts/ephemeral",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Post> createPostEphemeral(
        @Parameter(name = "CreatePostEphemeralRequest", description = "Ephemeral Post object to send", required = true) @Valid @RequestBody CreatePostEphemeralRequest createPostEphemeralRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/posts/{post_id} : Delete a post
     * Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
     *
     * @param postId ID of the post to delete (required)
     * @return Post deletion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "deletePost",
        summary = "Delete a post",
        description = "Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have `delete_others_posts` permission. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post deletion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/posts/{post_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> deletePost(
        @Parameter(name = "post_id", description = "ID of the post to delete", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/posts/{post_id}/actions/{action_id} : Perform a post action
     * Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
     *
     * @param postId Post GUID (required)
     * @param actionId Action GUID (required)
     * @return Post action successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "doPostAction",
        summary = "Perform a post action",
        description = "Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the `read_channel` permission to the channel the post is in. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post action successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/posts/{post_id}/actions/{action_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> doPostAction(
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId,
        @Parameter(name = "action_id", description = "Action GUID", required = true, in = ParameterIn.PATH) @PathVariable("action_id") String actionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/posts/{post_id}/files/info : Get file info for post
     * Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
     *
     * @param postId ID of the post (required)
     * @param includeDeleted Defines if result should include deleted posts, must have &#39;manage_system&#39; (admin) permission. (optional, default to false)
     * @return File info retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getFileInfosForPost",
        summary = "Get file info for post",
        description = "Gets a list of file information objects for the files attached to a post. ##### Permissions Must have `read_channel` permission for the channel the post is in. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "File info retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FileInfo.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/posts/{post_id}/files/info",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FileInfo>> getFileInfosForPost(
        @Parameter(name = "post_id", description = "ID of the post", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId,
        @Parameter(name = "include_deleted", description = "Defines if result should include deleted posts, must have 'manage_system' (admin) permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/posts/flagged : Get a list of flagged posts
     * Get a page of flagged posts of a user provided user id string. Selects from a channel, team, or all flagged posts by a user. Will only return posts from channels in which the user is member. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
     *
     * @param userId ID of the user (required)
     * @param teamId Team ID (optional)
     * @param channelId Channel ID (optional)
     * @param page The page to select (optional, default to 0)
     * @param perPage The number of posts per page (optional, default to 60)
     * @return Post list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getFlaggedPostsForUser",
        summary = "Get a list of flagged posts",
        description = "Get a page of flagged posts of a user provided user id string. Selects from a channel, team, or all flagged posts by a user. Will only return posts from channels in which the user is member. ##### Permissions Must be user or have `manage_system` permission. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PostList.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/posts/flagged",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PostList>> getFlaggedPostsForUser(
        @Parameter(name = "user_id", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "team_id", description = "Team ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "team_id", required = false) String teamId,
        @Parameter(name = "channel_id", description = "Channel ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "channel_id", required = false) String channelId,
        @Parameter(name = "page", description = "The page to select", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of posts per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"next_post_id\" : \"next_post_id\", \"has_next\" : true, \"prev_post_id\" : \"prev_post_id\", \"posts\" : { \"key\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } }, \"order\" : [ \"post_id1\", \"post_id12\" ] }, { \"next_post_id\" : \"next_post_id\", \"has_next\" : true, \"prev_post_id\" : \"prev_post_id\", \"posts\" : { \"key\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } }, \"order\" : [ \"post_id1\", \"post_id12\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/posts/{post_id} : Get a post
     * Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
     *
     * @param postId ID of the post to get (required)
     * @param includeDeleted Defines if result should include deleted posts, must have &#39;manage_system&#39; (admin) permission. (optional, default to false)
     * @return Post retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getPost",
        summary = "Get a post",
        description = "Get a single post. ##### Permissions Must have `read_channel` permission for the channel the post is in or if the channel is public, have the `read_public_channels` permission for the team. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/posts/{post_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Post> getPost(
        @Parameter(name = "post_id", description = "ID of the post to get", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId,
        @Parameter(name = "include_deleted", description = "Defines if result should include deleted posts, must have 'manage_system' (admin) permission.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/posts/{post_id}/thread : Get a thread
     * Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
     *
     * @param postId ID of a post in the thread (required)
     * @param perPage The number of posts per page (optional, default to 0)
     * @param fromPost The post_id to return the next page of posts from (optional, default to )
     * @param fromCreateAt The create_at timestamp to return the next page of posts from (optional, default to 0)
     * @param direction The direction to return the posts. Either up or down. (optional, default to )
     * @param skipFetchThreads Whether to skip fetching threads or not (optional, default to false)
     * @param collapsedThreads Whether the client uses CRT or not (optional, default to false)
     * @param collapsedThreadsExtended Whether to return the associated users as part of the response or not (optional, default to false)
     * @return Post list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getPostThread",
        summary = "Get a thread",
        description = "Get a post and the rest of the posts in the same thread. ##### Permissions Must have `read_channel` permission for the channel the post is in or if the channel is public, have the `read_public_channels` permission for the team. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post list retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/posts/{post_id}/thread",
        produces = { "application/json" }
    )
    default ResponseEntity<PostList> getPostThread(
        @Parameter(name = "post_id", description = "ID of a post in the thread", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId,
        @Parameter(name = "perPage", description = "The number of posts per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "perPage", required = false, defaultValue = "0") Integer perPage,
        @Parameter(name = "fromPost", description = "The post_id to return the next page of posts from", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromPost", required = false, defaultValue = "") String fromPost,
        @Parameter(name = "fromCreateAt", description = "The create_at timestamp to return the next page of posts from", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fromCreateAt", required = false, defaultValue = "0") Integer fromCreateAt,
        @Parameter(name = "direction", description = "The direction to return the posts. Either up or down.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "direction", required = false, defaultValue = "") String direction,
        @Parameter(name = "skipFetchThreads", description = "Whether to skip fetching threads or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipFetchThreads", required = false, defaultValue = "false") Boolean skipFetchThreads,
        @Parameter(name = "collapsedThreads", description = "Whether the client uses CRT or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "collapsedThreads", required = false, defaultValue = "false") Boolean collapsedThreads,
        @Parameter(name = "collapsedThreadsExtended", description = "Whether to return the associated users as part of the response or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "collapsedThreadsExtended", required = false, defaultValue = "false") Boolean collapsedThreadsExtended
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"next_post_id\" : \"next_post_id\", \"has_next\" : true, \"prev_post_id\" : \"prev_post_id\", \"posts\" : { \"key\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } }, \"order\" : [ \"post_id1\", \"post_id12\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/channels/{channel_id}/posts/unread : Get posts around oldest unread
     * Get the oldest unread post in the channel for the given user as well as the posts around it. The returned list is sorted in descending order (most recent post first). ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
     *
     * @param userId ID of the user (required)
     * @param channelId The channel ID to get the posts for (required)
     * @param limitBefore Number of posts before the oldest unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to 60)
     * @param limitAfter Number of posts after and including the oldest unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to 60)
     * @param skipFetchThreads Whether to skip fetching threads or not (optional, default to false)
     * @param collapsedThreads Whether the client uses CRT or not (optional, default to false)
     * @param collapsedThreadsExtended Whether to return the associated users as part of the response or not (optional, default to false)
     * @return Post list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getPostsAroundLastUnread",
        summary = "Get posts around oldest unread",
        description = "Get the oldest unread post in the channel for the given user as well as the posts around it. The returned list is sorted in descending order (most recent post first). ##### Permissions Must be logged in as the user or have `edit_other_users` permission, and must have `read_channel` permission for the channel. __Minimum server version__: 5.14 ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post list retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/channels/{channel_id}/posts/unread",
        produces = { "application/json" }
    )
    default ResponseEntity<PostList> getPostsAroundLastUnread(
        @Parameter(name = "user_id", description = "ID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "channel_id", description = "The channel ID to get the posts for", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Min(0) @Max(200) @Parameter(name = "limit_before", description = "Number of posts before the oldest unread posts. Maximum is 200 posts if limit is set greater than that.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit_before", required = false, defaultValue = "60") Integer limitBefore,
        @Min(1) @Max(200) @Parameter(name = "limit_after", description = "Number of posts after and including the oldest unread post. Maximum is 200 posts if limit is set greater than that.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit_after", required = false, defaultValue = "60") Integer limitAfter,
        @Parameter(name = "skipFetchThreads", description = "Whether to skip fetching threads or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "skipFetchThreads", required = false, defaultValue = "false") Boolean skipFetchThreads,
        @Parameter(name = "collapsedThreads", description = "Whether the client uses CRT or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "collapsedThreads", required = false, defaultValue = "false") Boolean collapsedThreads,
        @Parameter(name = "collapsedThreadsExtended", description = "Whether to return the associated users as part of the response or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "collapsedThreadsExtended", required = false, defaultValue = "false") Boolean collapsedThreadsExtended
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"next_post_id\" : \"next_post_id\", \"has_next\" : true, \"prev_post_id\" : \"prev_post_id\", \"posts\" : { \"key\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } }, \"order\" : [ \"post_id1\", \"post_id12\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/posts/ids : Get posts by a list of ids
     * Fetch a list of posts based on the provided postIDs ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
     *
     * @param requestBody List of post ids (required)
     * @return Post list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getPostsByIds",
        summary = "Get posts by a list of ids",
        description = "Fetch a list of posts based on the provided postIDs ##### Permissions Must have `read_channel` permission for the channel the post is in or if the channel is public, have the `read_public_channels` permission for the team. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Post.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/posts/ids",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Post>> getPostsByIds(
        @Parameter(name = "request_body", description = "List of post ids", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" }, { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/posts : Get posts for a channel
     * Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameter &#x60;since&#x60; must not be used with any of &#x60;before&#x60;, &#x60;after&#x60;, &#x60;page&#x60;, and &#x60;per_page&#x60; parameters. If &#x60;since&#x60; is used, it will always return all posts modified since that time, ordered by their create time limited till 1000. A caveat with this parameter is that there is no guarantee that the returned posts will be consecutive. It is left to the clients to maintain state and fill any missing holes in the post order. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
     *
     * @param channelId The channel ID to get the posts for (required)
     * @param page The page to select (optional, default to 0)
     * @param perPage The number of posts per page (optional, default to 60)
     * @param since Provide a non-zero value in Unix time milliseconds to select posts modified after that time (optional)
     * @param before A post id to select the posts that came before this one (optional)
     * @param after A post id to select the posts that came after this one (optional)
     * @param includeDeleted Whether to include deleted posts or not. Must have system admin permissions. (optional, default to false)
     * @return Post list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getPostsForChannel",
        summary = "Get posts for a channel",
        description = "Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameter `since` must not be used with any of `before`, `after`, `page`, and `per_page` parameters. If `since` is used, it will always return all posts modified since that time, ordered by their create time limited till 1000. A caveat with this parameter is that there is no guarantee that the returned posts will be consecutive. It is left to the clients to maintain state and fill any missing holes in the post order. ##### Permissions Must have `read_channel` permission for the channel. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post list retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/posts",
        produces = { "application/json" }
    )
    default ResponseEntity<PostList> getPostsForChannel(
        @Parameter(name = "channel_id", description = "The channel ID to get the posts for", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "page", description = "The page to select", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of posts per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage,
        @Parameter(name = "since", description = "Provide a non-zero value in Unix time milliseconds to select posts modified after that time", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) Integer since,
        @Parameter(name = "before", description = "A post id to select the posts that came before this one", in = ParameterIn.QUERY) @Valid @RequestParam(value = "before", required = false) String before,
        @Parameter(name = "after", description = "A post id to select the posts that came after this one", in = ParameterIn.QUERY) @Valid @RequestParam(value = "after", required = false) String after,
        @Parameter(name = "include_deleted", description = "Whether to include deleted posts or not. Must have system admin permissions.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"next_post_id\" : \"next_post_id\", \"has_next\" : true, \"prev_post_id\" : \"prev_post_id\", \"posts\" : { \"key\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } }, \"order\" : [ \"post_id1\", \"post_id12\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/posts/{post_id}/patch : Patch a post
     * Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
     *
     * @param postId Post GUID (required)
     * @param patchPostRequest Post object that is to be updated (required)
     * @return Post patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "patchPost",
        summary = "Patch a post",
        description = "Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the `edit_post` permission. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/posts/{post_id}/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Post> patchPost(
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId,
        @Parameter(name = "PatchPostRequest", description = "Post object that is to be updated", required = true) @Valid @RequestBody PatchPostRequest patchPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/posts/{post_id}/pin : Pin a post to the channel
     * Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
     *
     * @param postId Post GUID (required)
     * @return Pinned post successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "pinPost",
        summary = "Pin a post to the channel",
        description = "Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the `read_channel` permission to the channel the post is in. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pinned post successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/posts/{post_id}/pin",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> pinPost(
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/posts/{post_id}/ack : Acknowledge a post
     * Acknowledge a post that has a request for acknowledgements. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.&lt;br/&gt; Must be logged in as the user or have &#x60;edit_other_users&#x60; permission.  __Minimum server version__: 7.7 
     *
     * @param userId User GUID (required)
     * @param postId Post GUID (required)
     * @return Acknowledgement saved successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "saveAcknowledgementForPost",
        summary = "Acknowledge a post",
        description = "Acknowledge a post that has a request for acknowledgements. ##### Permissions Must have `read_channel` permission for the channel the post is in.<br/> Must be logged in as the user or have `edit_other_users` permission.  __Minimum server version__: 7.7 ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Acknowledgement saved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostAcknowledgement.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/posts/{post_id}/ack",
        produces = { "application/json" }
    )
    default ResponseEntity<PostAcknowledgement> saveAcknowledgementForPost(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/posts/search : Search for team posts
     * Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param searchPostsRequest The search terms and logic to use in the search. (required)
     * @return Post list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "searchPosts",
        summary = "Search for team posts",
        description = "Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the `view_team` permission. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post list retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostListWithSearchMatches.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/posts/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PostListWithSearchMatches> searchPosts(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "SearchPostsRequest", description = "The search terms and logic to use in the search.", required = true) @Valid @RequestBody SearchPostsRequest searchPostsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"posts\" : { \"key\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } }, \"matches\" : { \"post_id1\" : [ \"search match 1\", \"search match 2\" ] }, \"order\" : [ \"post_id1\", \"post_id12\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/posts/{post_id}/reminder : Set a post reminder
     * Set a reminder for the user for the post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 7.2 
     *
     * @param userId User GUID (required)
     * @param postId Post GUID (required)
     * @param setPostReminderRequest Target time for the reminder (required)
     * @return Reminder set successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "setPostReminder",
        summary = "Set a post reminder",
        description = "Set a reminder for the user for the post. ##### Permissions Must have `read_channel` permission for the channel the post is in.  __Minimum server version__: 7.2 ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Reminder set successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/posts/{post_id}/reminder",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> setPostReminder(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId,
        @Parameter(name = "SetPostReminderRequest", description = "Target time for the reminder", required = true) @Valid @RequestBody SetPostReminderRequest setPostReminderRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/posts/{post_id}/set_unread : Mark as unread from a post.
     * Mark a channel as being unread from a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. Must have &#x60;edit_other_users&#x60; permission if the user is not the one marking the post for himself.  __Minimum server version__: 5.18 
     *
     * @param userId User GUID (required)
     * @param postId Post GUID (required)
     * @return Post marked as unread successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "setPostUnread",
        summary = "Mark as unread from a post.",
        description = "Mark a channel as being unread from a given post. ##### Permissions Must have `read_channel` permission for the channel the post is in or if the channel is public, have the `read_public_channels` permission for the team. Must have `edit_other_users` permission if the user is not the one marking the post for himself.  __Minimum server version__: 5.18 ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post marked as unread successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChannelUnreadAt.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/posts/{post_id}/set_unread",
        produces = { "application/json" }
    )
    default ResponseEntity<ChannelUnreadAt> setPostUnread(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"last_viewed_at\" : 1, \"team_id\" : \"team_id\", \"mention_count\" : 6, \"channel_id\" : \"channel_id\", \"msg_count\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/posts/{post_id}/unpin : Unpin a post to the channel
     * Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
     *
     * @param postId Post GUID (required)
     * @return Unpinned post successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "unpinPost",
        summary = "Unpin a post to the channel",
        description = "Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the `read_channel` permission to the channel the post is in. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Unpinned post successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/posts/{post_id}/unpin",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> unpinPost(
        @Parameter(name = "post_id", description = "Post GUID", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/posts/{post_id} : Update a post
     * Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
     *
     * @param postId ID of the post to update (required)
     * @param updatePostRequest Post object that is to be updated (required)
     * @return Post update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "updatePost",
        summary = "Update a post",
        description = "Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have `edit_post` permission for the channel the post is in. ",
        tags = { "posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Post update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Post.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/posts/{post_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Post> updatePost(
        @Parameter(name = "post_id", description = "ID of the post to update", required = true, in = ParameterIn.PATH) @PathVariable("post_id") String postId,
        @Parameter(name = "UpdatePostRequest", description = "Post object that is to be updated", required = true) @Valid @RequestBody UpdatePostRequest updatePostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
