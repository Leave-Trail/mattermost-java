/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leavetrail.chat.bots.controller;

import com.leavetrail.chat.bots.dto.Bot;
import com.leavetrail.chat.bots.dto.ConvertBotToUserRequest;
import com.leavetrail.chat.bots.dto.CreateBotRequest;
import com.leavetrail.chat.bots.dto.ProductLimits;
import com.leavetrail.chat.bots.dto.StatusOK;
import com.leavetrail.chat.core.dto.AppError;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-20T18:55:29.180415+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "bots", description = "Endpoints for creating, getting and updating bot users.")
public interface BotsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v4/bots/{bot_user_id}/assign/{user_id} : Assign a bot to a user
     * Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
     *
     * @param botUserId Bot user ID (required)
     * @param userId The user ID to assign the bot to. (required)
     * @return Bot successfully assigned. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "assignBot",
        summary = "Assign a bot to a user",
        description = "Assign a bot to a specified user. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot successfully assigned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bot.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/bots/{bot_user_id}/assign/{user_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Bot> assignBot(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId,
        @Parameter(name = "user_id", description = "The user ID to assign the bot to.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/bots/{bot_user_id}/convert_to_user : Convert a bot into a user
     * Convert a bot into a user.  __Minimum server version__: 5.26  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param botUserId Bot user ID (required)
     * @param convertBotToUserRequest Data to be used in the user creation (required)
     * @param setSystemAdmin Whether to give the user the system admin role. (optional, default to false)
     * @return Bot successfully converted (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "convertBotToUser",
        summary = "Convert a bot into a user",
        description = "Convert a bot into a user.  __Minimum server version__: 5.26  ##### Permissions Must have `manage_system` permission. ",
        tags = { "bots", "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot successfully converted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/bots/{bot_user_id}/convert_to_user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> convertBotToUser(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId,
        @Parameter(name = "ConvertBotToUserRequest", description = "Data to be used in the user creation", required = true) @Valid @RequestBody ConvertBotToUserRequest convertBotToUserRequest,
        @Parameter(name = "set_system_admin", description = "Whether to give the user the system admin role.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "set_system_admin", required = false, defaultValue = "false") Boolean setSystemAdmin
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/bots : Create a bot
     * Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
     *
     * @param createBotRequest Bot to be created (required)
     * @return Bot creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createBot",
        summary = "Create a bot",
        description = "Create a new bot account on the system. Username is required. ##### Permissions Must have `create_bot` permission. __Minimum server version__: 5.10 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Bot creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bot.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/bots",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Bot> createBot(
        @Parameter(name = "CreateBotRequest", description = "Bot to be created", required = true) @Valid @RequestBody CreateBotRequest createBotRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/bots/{bot_user_id}/icon : Delete bot&#39;s LHS icon image
     * Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
     *
     * @param botUserId Bot user ID (required)
     * @return Icon image deletion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "deleteBotIconImage",
        summary = "Delete bot's LHS icon image",
        description = "Delete bot's LHS icon image based on bot_user_id string parameter. ##### Permissions Must have `manage_bots` permission. __Minimum server version__: 5.14 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Icon image deletion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/bots/{bot_user_id}/icon",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> deleteBotIconImage(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/bots/{bot_user_id}/disable : Disable a bot
     * Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
     *
     * @param botUserId Bot user ID (required)
     * @return Bot successfully disabled. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "disableBot",
        summary = "Disable a bot",
        description = "Disable a bot. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot successfully disabled.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bot.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/bots/{bot_user_id}/disable",
        produces = { "application/json" }
    )
    default ResponseEntity<Bot> disableBot(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/bots/{bot_user_id}/enable : Enable a bot
     * Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
     *
     * @param botUserId Bot user ID (required)
     * @return Bot successfully enabled. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "enableBot",
        summary = "Enable a bot",
        description = "Enable a bot. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot successfully enabled.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bot.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/bots/{bot_user_id}/enable",
        produces = { "application/json" }
    )
    default ResponseEntity<Bot> enableBot(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/bots/{bot_user_id} : Get a bot
     * Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
     *
     * @param botUserId Bot user ID (required)
     * @param includeDeleted If deleted bots should be returned. (optional)
     * @return Bot successfully retrieved. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getBot",
        summary = "Get a bot",
        description = "Get a bot specified by its bot id. ##### Permissions Must have `read_bots` permission for bots you are managing, and `read_others_bots` permission for bots others are managing. __Minimum server version__: 5.10 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot successfully retrieved.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bot.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/bots/{bot_user_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Bot> getBot(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId,
        @Parameter(name = "include_deleted", description = "If deleted bots should be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false) Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/bots/{bot_user_id}/icon : Get bot&#39;s LHS icon
     * Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
     *
     * @param botUserId Bot user ID (required)
     * @return Bot&#39;s LHS icon image (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getBotIconImage",
        summary = "Get bot's LHS icon",
        description = "Get a bot's LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot's LHS icon image"),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/bots/{bot_user_id}/icon",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getBotIconImage(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/bots : Get bots
     * Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
     *
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of users per page. There is a maximum limit of 200 users per page. (optional, default to 60)
     * @param includeDeleted If deleted bots should be returned. (optional)
     * @param onlyOrphaned When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)
     * @return Bot page retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getBots",
        summary = "Get bots",
        description = "Get a page of a list of bots. ##### Permissions Must have `read_bots` permission for bots you are managing, and `read_others_bots` permission for bots others are managing. __Minimum server version__: 5.10 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot page retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Bot.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/bots",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Bot>> getBots(
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of users per page. There is a maximum limit of 200 users per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage,
        @Parameter(name = "include_deleted", description = "If deleted bots should be returned.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false) Boolean includeDeleted,
        @Parameter(name = "only_orphaned", description = "When true, only orphaned bots will be returned. A bot is consitered orphaned if it's owner has been deactivated.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "only_orphaned", required = false) Boolean onlyOrphaned
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" }, { \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/cloud/limits : Get cloud workspace limits
     * Retrieve any cloud workspace limits applicable to this instance. ##### Permissions Must be authenticated and be licensed for Cloud. __Minimum server version__: 7.0 __Note:__ This is intended for internal use and is subject to change. 
     *
     * @return Cloud workspace limits returned successfully (status code 200)
     *         or No access token provided (status code 401)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "getCloudLimits",
        summary = "Get cloud workspace limits",
        description = "Retrieve any cloud workspace limits applicable to this instance. ##### Permissions Must be authenticated and be licensed for Cloud. __Minimum server version__: 7.0 __Note:__ This is intended for internal use and is subject to change. ",
        tags = { "cloud" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cloud workspace limits returned successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductLimits.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/cloud/limits",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductLimits> getCloudLimits(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"teams\" : { \"active\" : 2 }, \"boards\" : { \"cards\" : 0, \"views\" : 6 }, \"files\" : { \"total_storage\" : 1 }, \"messages\" : { \"history\" : 5 }, \"integrations\" : { \"enabled\" : 5 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/bots/{bot_user_id} : Patch a bot
     * Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
     *
     * @param botUserId Bot user ID (required)
     * @param createBotRequest Bot to be created (required)
     * @return Bot patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "patchBot",
        summary = "Patch a bot",
        description = "Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have `manage_bots` permission.  __Minimum server version__: 5.10 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bot patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Bot.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/bots/{bot_user_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Bot> patchBot(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId,
        @Parameter(name = "CreateBotRequest", description = "Bot to be created", required = true) @Valid @RequestBody CreateBotRequest createBotRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"owner_id\" : \"owner_id\", \"update_at\" : 6, \"delete_at\" : 1, \"description\" : \"description\", \"create_at\" : 0, \"display_name\" : \"display_name\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/bots/{bot_user_id}/icon : Set bot&#39;s LHS icon image
     * Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
     *
     * @param botUserId Bot user ID (required)
     * @param image SVG icon image to be uploaded (required)
     * @return SVG icon image set successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Content too large (status code 413)
     *         or Something went wrong with the server (status code 500)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "setBotIconImage",
        summary = "Set bot's LHS icon image",
        description = "Set a bot's LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have `manage_bots` permission. __Minimum server version__: 5.14 ",
        tags = { "bots" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SVG icon image set successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "413", description = "Content too large", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "500", description = "Something went wrong with the server", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/bots/{bot_user_id}/icon",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<StatusOK> setBotIconImage(
        @Parameter(name = "bot_user_id", description = "Bot user ID", required = true, in = ParameterIn.PATH) @PathVariable("bot_user_id") String botUserId,
        @Parameter(name = "image", description = "SVG icon image to be uploaded", required = true) @RequestPart(value = "image", required = true) MultipartFile image
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
