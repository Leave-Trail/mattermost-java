/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.leavetrail.chat.channel.controller;

import com.leavetrail.chat.channel.dto.AddChannelMemberRequest;
import com.leavetrail.chat.channel.dto.Channel;
import com.leavetrail.chat.channel.dto.ChannelMember;
import com.leavetrail.chat.channel.dto.ChannelModeration;
import com.leavetrail.chat.channel.dto.ChannelModerationPatch;
import com.leavetrail.chat.channel.dto.ChannelNotifyProps;
import com.leavetrail.chat.channel.dto.ChannelStats;
import com.leavetrail.chat.channel.dto.ChannelUnread;
import com.leavetrail.chat.channel.dto.ChannelWithTeamData;
import com.leavetrail.chat.channel.dto.CreateChannelRequest;
import java.util.List;
import com.leavetrail.chat.channel.dto.MoveChannelRequest;
import com.leavetrail.chat.channel.dto.OrderedSidebarCategories;
import com.leavetrail.chat.channel.dto.PatchChannelRequest;
import com.leavetrail.chat.channel.dto.PostList;
import com.leavetrail.chat.channel.dto.SearchAllChannels200Response;
import com.leavetrail.chat.channel.dto.SearchAllChannelsRequest;
import com.leavetrail.chat.channel.dto.SearchArchivedChannelsRequest;
import com.leavetrail.chat.channel.dto.SearchChannelsRequest;
import com.leavetrail.chat.channel.dto.SearchGroupChannelsRequest;
import com.leavetrail.chat.channel.dto.SidebarCategory;
import com.leavetrail.chat.channel.dto.StatusOK;
import com.leavetrail.chat.channel.dto.UpdateChannelMemberSchemeRolesRequest;
import com.leavetrail.chat.channel.dto.UpdateChannelPrivacyRequest;
import com.leavetrail.chat.channel.dto.UpdateChannelRequest;
import com.leavetrail.chat.channel.dto.UpdateChannelRolesRequest;
import com.leavetrail.chat.channel.dto.UpdateChannelSchemeRequest;
import com.leavetrail.chat.channel.dto.ViewChannel200Response;
import com.leavetrail.chat.channel.dto.ViewChannelRequest;
import com.leavetrail.chat.core.dto.AppError;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

import com.leavetrail.chat.core.dto.AppError;
import com.leavetrail.chat.core.util.ApiUtil;



@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-20T18:55:32.965983+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "channels", description = "Endpoints for creating, getting and interacting with channels.")
public interface ChannelApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v4/channels/{channel_id}/members : Add user to channel
     * Add a user to a channel by creating a channel member object.
     *
     * @param channelId The channel ID (required)
     * @param addChannelMemberRequest  (required)
     * @return Channel member creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "addChannelMember",
        summary = "Add user to channel",
        description = "Add a user to a channel by creating a channel member object.",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Channel member creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChannelMember.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/{channel_id}/members",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ChannelMember> addChannelMember(
        @Parameter(name = "channel_id", description = "The channel ID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "AddChannelMemberRequest", description = "", required = true) @Valid @RequestBody AddChannelMemberRequest addChannelMemberRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/channels/autocomplete : Autocomplete channels
     * Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param name Name or display name (required)
     * @return Channels autocomplete successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "autocompleteChannelsForTeam",
        summary = "Autocomplete channels",
        description = "Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels autocomplete successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/channels/autocomplete",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Channel>> autocompleteChannelsForTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @NotNull @Parameter(name = "name", description = "Name or display name", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/channels/search_autocomplete : Autocomplete channels for search
     * Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param name Name or display name (required)
     * @return Channels autocomplete successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "autocompleteChannelsForTeamForSearch",
        summary = "Autocomplete channels for search",
        description = "Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels autocomplete successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/channels/search_autocomplete",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Channel>> autocompleteChannelsForTeamForSearch(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @NotNull @Parameter(name = "name", description = "Name or display name", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/members_minus_group_members : Channel members minus group members.
     * Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
     *
     * @param channelId Channel GUID (required)
     * @param groupIds A comma-separated list of group ids. (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of users per page. (optional, default to 0)
     * @return Successfully returns users specified by the pagination, and the total_count. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "channelMembersMinusGroupMembers",
        summary = "Channel members minus group members.",
        description = "Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields `scheme_guest`, `scheme_user`, and `scheme_admin` representing the roles that user has for the given channel.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.14 ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully returns users specified by the pagination, and the total_count."),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/members_minus_group_members",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> channelMembersMinusGroupMembers(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @NotNull @Parameter(name = "group_ids", description = "A comma-separated list of group ids.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "group_ids", required = true, defaultValue = "") String groupIds,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of users per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "0") Integer perPage
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels : Create a channel
     * Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
     *
     * @param createChannelRequest Channel object to be created (required)
     * @return Channel creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createChannel",
        summary = "Create a channel",
        description = "Create a new channel. ##### Permissions If creating a public channel, `create_public_channel` permission is required. If creating a private channel, `create_private_channel` permission is required. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Channel creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Channel> createChannel(
        @Parameter(name = "CreateChannelRequest", description = "Channel object to be created", required = true) @Valid @RequestBody CreateChannelRequest createChannelRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/direct : Create a direct message channel
     * Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
     *
     * @param requestBody The two user ids to be in the direct message (required)
     * @return Direct channel creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createDirectChannel",
        summary = "Create a direct message channel",
        description = "Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have `create_direct_channel` permission. Having the `manage_system` permission voids the previous requirements. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Direct channel creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/direct",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Channel> createDirectChannel(
        @Parameter(name = "request_body", description = "The two user ids to be in the direct message", required = true) @Valid@Size(min = 2, max = 2)  @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/group : Create a group message channel
     * Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
     *
     * @param requestBody User ids to be in the group message channel (required)
     * @return Group channel creation successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "createGroupChannel",
        summary = "Create a group message channel",
        description = "Create a new group message channel to group of users. If the logged in user's id is not included in the list, it will be appended to the end. ##### Permissions Must have `create_group_channel` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Group channel creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/group",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Channel> createGroupChannel(
        @Parameter(name = "request_body", description = "User ids to be in the group message channel", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/users/{user_id}/teams/{team_id}/channels/categories : Create user&#39;s sidebar category
     * Create a custom sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param sidebarCategory  (required)
     * @return Category creation successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "createSidebarCategoryForTeamForUser",
        summary = "Create user's sidebar category",
        description = "Create a custom sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category creation successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SidebarCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SidebarCategory> createSidebarCategoryForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "SidebarCategory", description = "", required = true) @Valid @RequestBody SidebarCategory sidebarCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/channels/{channel_id} : Delete a channel
     * Archives a channel. This will set the &#x60;deleteAt&#x60; to the current timestamp in the database. Soft deleted channels may not be accessible in the user interface. They can be viewed and unarchived in the **System Console &gt; User Management &gt; Channels** based on your license. Direct and group message channels cannot be deleted.  As of server version 5.28, optionally use the &#x60;permanent&#x3D;true&#x60; query parameter to permanently delete the channel for compliance reasons. To use this feature &#x60;ServiceSettings.EnableAPIChannelDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration.  If you permanently delete a channel this action is not recoverable outside of a database backup.  ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
     *
     * @param channelId Channel GUID (required)
     * @return Channel deletion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "deleteChannel",
        summary = "Delete a channel",
        description = "Archives a channel. This will set the `deleteAt` to the current timestamp in the database. Soft deleted channels may not be accessible in the user interface. They can be viewed and unarchived in the **System Console > User Management > Channels** based on your license. Direct and group message channels cannot be deleted.  As of server version 5.28, optionally use the `permanent=true` query parameter to permanently delete the channel for compliance reasons. To use this feature `ServiceSettings.EnableAPIChannelDeletion` must be set to `true` in the server's configuration.  If you permanently delete a channel this action is not recoverable outside of a database backup.  ##### Permissions `delete_public_channel` permission if the channel is public, `delete_private_channel` permission if the channel is private, or have `manage_system` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel deletion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/channels/{channel_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> deleteChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels : Get a list of all channels
     * ##### Permissions &#x60;manage_system&#x60; 
     *
     * @param notAssociatedToGroup A group id to exclude channels that are associated with that group via GroupChannel records. This can also be left blank with &#x60;not_associated_to_group&#x3D;&#x60;. (optional)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of channels per page. (optional, default to 0)
     * @param excludeDefaultChannels Whether to exclude default channels (ex Town Square, Off-Topic) from the results. (optional, default to false)
     * @param includeDeleted Include channels that have been archived. This correlates to the &#x60;DeleteAt&#x60; flag being set in the database. (optional, default to false)
     * @param includeTotalCount Appends a total count of returned channels inside the response object - ex: &#x60;{ \&quot;channels\&quot;: [], \&quot;total_count\&quot; : 0 }&#x60;.       (optional, default to false)
     * @param excludePolicyConstrained If set to true, channels which are part of a data retention policy will be excluded. The &#x60;sysconsole_read_compliance&#x60; permission is required to use this parameter. __Minimum server version__: 5.35 (optional, default to false)
     * @return Channel list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getAllChannels",
        summary = "Get a list of all channels",
        description = "##### Permissions `manage_system` ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChannelWithTeamData.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ChannelWithTeamData>> getAllChannels(
        @Parameter(name = "not_associated_to_group", description = "A group id to exclude channels that are associated with that group via GroupChannel records. This can also be left blank with `not_associated_to_group=`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "not_associated_to_group", required = false) String notAssociatedToGroup,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of channels per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "0") Integer perPage,
        @Parameter(name = "exclude_default_channels", description = "Whether to exclude default channels (ex Town Square, Off-Topic) from the results.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exclude_default_channels", required = false, defaultValue = "false") Boolean excludeDefaultChannels,
        @Parameter(name = "include_deleted", description = "Include channels that have been archived. This correlates to the `DeleteAt` flag being set in the database.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted,
        @Parameter(name = "include_total_count", description = "Appends a total count of returned channels inside the response object - ex: `{ \"channels\": [], \"total_count\" : 0 }`.      ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_total_count", required = false, defaultValue = "false") Boolean includeTotalCount,
        @Parameter(name = "exclude_policy_constrained", description = "If set to true, channels which are part of a data retention policy will be excluded. The `sysconsole_read_compliance` permission is required to use this parameter. __Minimum server version__: 5.35", in = ParameterIn.QUERY) @Valid @RequestParam(value = "exclude_policy_constrained", required = false, defaultValue = "false") Boolean excludePolicyConstrained
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id} : Get a channel
     * Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
     *
     * @param channelId Channel GUID (required)
     * @return Channel retrieval successful (status code 200)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannel",
        summary = "Get a channel",
        description = "Get channel from the provided channel id string. ##### Permissions `read_channel` permission for the channel. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Channel> getChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/channels/name/{channel_name} : Get a channel by name
     * Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
     *
     * @param teamId Team GUID (required)
     * @param channelName Channel Name (required)
     * @param includeDeleted Defines if deleted channels should be returned or not (Mattermost Server 5.26.0+) (optional, default to false)
     * @return Channel retrieval successful (status code 200)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannelByName",
        summary = "Get a channel by name",
        description = "Gets channel from the provided team id and channel name strings. ##### Permissions `read_channel` permission for the channel. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/channels/name/{channel_name}",
        produces = { "application/json" }
    )
    default ResponseEntity<Channel> getChannelByName(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "channel_name", description = "Channel Name", required = true, in = ParameterIn.PATH) @PathVariable("channel_name") String channelName,
        @Parameter(name = "include_deleted", description = "Defines if deleted channels should be returned or not (Mattermost Server 5.26.0+)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/name/{team_name}/channels/name/{channel_name} : Get a channel by name and team name
     * Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
     *
     * @param teamName Team Name (required)
     * @param channelName Channel Name (required)
     * @param includeDeleted Defines if deleted channels should be returned or not (Mattermost Server 5.26.0+) (optional, default to false)
     * @return Channel retrieval successful (status code 200)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannelByNameForTeamName",
        summary = "Get a channel by name and team name",
        description = "Gets a channel from the provided team name and channel name strings. ##### Permissions `read_channel` permission for the channel. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/name/{team_name}/channels/name/{channel_name}",
        produces = { "application/json" }
    )
    default ResponseEntity<Channel> getChannelByNameForTeamName(
        @Parameter(name = "team_name", description = "Team Name", required = true, in = ParameterIn.PATH) @PathVariable("team_name") String teamName,
        @Parameter(name = "channel_name", description = "Channel Name", required = true, in = ParameterIn.PATH) @PathVariable("channel_name") String channelName,
        @Parameter(name = "include_deleted", description = "Defines if deleted channels should be returned or not (Mattermost Server 5.26.0+)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/members/{user_id} : Get channel member
     * Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
     *
     * @param channelId Channel GUID (required)
     * @param userId User GUID (required)
     * @return Channel member retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getChannelMember",
        summary = "Get channel member",
        description = "Get a channel member. ##### Permissions `read_channel` permission for the channel. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel member retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChannelMember.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/members/{user_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ChannelMember> getChannelMember(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/member_counts_by_group : Channel members counts for each group that has atleast one member in the channel
     * Returns a set of ChannelMemberCountByGroup objects which contain a &#x60;group_id&#x60;, &#x60;channel_member_count&#x60; and a &#x60;channel_member_timezones_count&#x60;. ##### Permissions Must have &#x60;read_channel&#x60; permission for the given channel. __Minimum server version__: 5.24 
     *
     * @param channelId Channel GUID (required)
     * @param includeTimezones Defines if member timezone counts should be returned or not (optional, default to false)
     * @return Successfully returns member counts by group for the given channel. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getChannelMemberCountsByGroup",
        summary = "Channel members counts for each group that has atleast one member in the channel",
        description = "Returns a set of ChannelMemberCountByGroup objects which contain a `group_id`, `channel_member_count` and a `channel_member_timezones_count`. ##### Permissions Must have `read_channel` permission for the given channel. __Minimum server version__: 5.24 ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully returns member counts by group for the given channel."),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/member_counts_by_group",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> getChannelMemberCountsByGroup(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "include_timezones", description = "Defines if member timezone counts should be returned or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_timezones", required = false, defaultValue = "false") Boolean includeTimezones
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/members : Get channel members
     * Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
     *
     * @param channelId Channel GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of members per page. There is a maximum limit of 200 members. (optional, default to 60)
     * @return Channel members retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getChannelMembers",
        summary = "Get channel members",
        description = "Get a page of members for a channel. ##### Permissions `read_channel` permission for the channel. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel members retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChannelMember.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/members",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ChannelMember>> getChannelMembers(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of members per page. There is a maximum limit of 200 members.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 }, { \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/{channel_id}/members/ids : Get channel members by ids
     * Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
     *
     * @param channelId Channel GUID (required)
     * @param requestBody List of user ids (required)
     * @return Channel member list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannelMembersByIds",
        summary = "Get channel members by ids",
        description = "Get a list of channel members based on the provided user ids. ##### Permissions Must have the `read_channel` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel member list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChannelMember.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/{channel_id}/members/ids",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<ChannelMember>> getChannelMembersByIds(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "request_body", description = "List of user ids", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 }, { \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/{team_id}/channels/members : Get channel memberships and roles for a user
     * Get all channel memberships and associated membership roles (i.e. &#x60;channel_user&#x60;, &#x60;channel_admin&#x60;) for a user on a specific team. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
     *
     * @param userId User GUID (required)
     * @param teamId Team GUID (required)
     * @return Channel members retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getChannelMembersForUser",
        summary = "Get channel memberships and roles for a user",
        description = "Get all channel memberships and associated membership roles (i.e. `channel_user`, `channel_admin`) for a user on a specific team. ##### Permissions Logged in as the user and `view_team` permission for the team. Having `manage_system` permission voids the previous requirements. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel members retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChannelMember.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/members",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ChannelMember>> getChannelMembersForUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 }, { \"user_id\" : \"user_id\", \"last_viewed_at\" : 0, \"roles\" : \"roles\", \"notify_props\" : { \"desktop\" : \"desktop\", \"mark_unread\" : \"mark_unread\", \"email\" : \"email\", \"push\" : \"push\" }, \"last_update_at\" : 5, \"mention_count\" : 1, \"channel_id\" : \"channel_id\", \"msg_count\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/timezones : Get timezones in a channel
     * Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
     *
     * @param channelId Channel GUID (required)
     * @return Timezone retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getChannelMembersTimezones",
        summary = "Get timezones in a channel",
        description = "Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the `read_channel` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Timezone retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/timezones",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getChannelMembersTimezones(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/moderations : Get information about channel&#39;s moderation.
     * ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.22 
     *
     * @param channelId Channel GUID (required)
     * @return Retreived successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getChannelModerations",
        summary = "Get information about channel's moderation.",
        description = "##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.22 ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Retreived successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChannelModeration.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/moderations",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ChannelModeration>> getChannelModerations(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"roles\" : { \"members\" : { \"value\" : true, \"enabled\" : true }, \"guests\" : { \"value\" : true, \"enabled\" : true } }, \"name\" : \"name\" }, { \"roles\" : { \"members\" : { \"value\" : true, \"enabled\" : true }, \"guests\" : { \"value\" : true, \"enabled\" : true } }, \"name\" : \"name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/stats : Get channel statistics
     * Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
     *
     * @param channelId Channel GUID (required)
     * @return Channel statistics retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getChannelStats",
        summary = "Get channel statistics",
        description = "Get statistics for a channel. ##### Permissions Must have the `read_channel` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel statistics retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChannelStats.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/stats",
        produces = { "application/json" }
    )
    default ResponseEntity<ChannelStats> getChannelStats(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"member_count\" : 0, \"channel_id\" : \"channel_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/channels/{channel_id}/unread : Get unread messages
     * Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
     *
     * @param userId User GUID (required)
     * @param channelId Channel GUID (required)
     * @return Channel unreads retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannelUnread",
        summary = "Get unread messages",
        description = "Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the `read_channel` permission, or have `edit_other_usrs` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel unreads retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChannelUnread.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/channels/{channel_id}/unread",
        produces = { "application/json" }
    )
    default ResponseEntity<ChannelUnread> getChannelUnread(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"team_id\" : \"team_id\", \"mention_count\" : 6, \"channel_id\" : \"channel_id\", \"msg_count\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/{team_id}/channels : Get channels for user
     * Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
     *
     * @param userId User GUID (required)
     * @param teamId Team GUID (required)
     * @param includeDeleted Defines if deleted channels should be returned or not (optional, default to false)
     * @param lastDeleteAt Filters the deleted channels by this time in epoch format. Does not have any effect if include_deleted is set to false. (optional, default to 0)
     * @return Channels retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannelsForTeamForUser",
        summary = "Get channels for user",
        description = "Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have `edit_other_users` permission, and `view_team` permission for the team. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Channel>> getChannelsForTeamForUser(
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "include_deleted", description = "Defines if deleted channels should be returned or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted,
        @Parameter(name = "last_delete_at", description = "Filters the deleted channels by this time in epoch format. Does not have any effect if include_deleted is set to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "last_delete_at", required = false, defaultValue = "0") Integer lastDeleteAt
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/channels : Get all channels from all teams
     * Get all channels from all teams that a user is a member of.  __Minimum server version__: 6.1  ##### Permissions  Logged in as the user, or have &#x60;edit_other_users&#x60; permission. 
     *
     * @param userId The ID of the user. This can also be \&quot;me\&quot; which will point to the current user. (required)
     * @param lastDeleteAt Filters the deleted channels by this time in epoch format. Does not have any effect if include_deleted is set to false. (optional, default to 0)
     * @param includeDeleted Defines if deleted channels should be returned or not (optional, default to false)
     * @return Channels retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getChannelsForUser",
        summary = "Get all channels from all teams",
        description = "Get all channels from all teams that a user is a member of.  __Minimum server version__: 6.1  ##### Permissions  Logged in as the user, or have `edit_other_users` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/channels",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Channel>> getChannelsForUser(
        @Parameter(name = "user_id", description = "The ID of the user. This can also be \"me\" which will point to the current user.", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "last_delete_at", description = "Filters the deleted channels by this time in epoch format. Does not have any effect if include_deleted is set to false.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "last_delete_at", required = false, defaultValue = "0") Integer lastDeleteAt,
        @Parameter(name = "include_deleted", description = "Defines if deleted channels should be returned or not", in = ParameterIn.QUERY) @Valid @RequestParam(value = "include_deleted", required = false, defaultValue = "false") Boolean includeDeleted
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/channels/deleted : Get deleted channels
     * Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10 
     *
     * @param teamId Team GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of public channels per page. (optional, default to 60)
     * @return Channels retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getDeletedChannelsForTeam",
        summary = "Get deleted channels",
        description = "Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10 ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/channels/deleted",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Channel>> getDeletedChannelsForTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of public channels per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/channels/{channel_id}/pinned : Get a channel&#39;s pinned posts
     * Get a list of pinned posts for channel.
     *
     * @param channelId Channel GUID (required)
     * @return The list of channel pinned posts (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "getPinnedPosts",
        summary = "Get a channel's pinned posts",
        description = "Get a list of pinned posts for channel.",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The list of channel pinned posts", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PostList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/channels/{channel_id}/pinned",
        produces = { "application/json" }
    )
    default ResponseEntity<PostList> getPinnedPosts(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"next_post_id\" : \"next_post_id\", \"has_next\" : true, \"prev_post_id\" : \"prev_post_id\", \"posts\" : { \"key\" : { \"pending_post_id\" : \"pending_post_id\", \"metadata\" : { \"emojis\" : [ { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 }, { \"creator_id\" : \"creator_id\", \"name\" : \"name\", \"update_at\" : 2, \"delete_at\" : 7, \"id\" : \"id\", \"create_at\" : 5 } ], \"images\" : [ { \"width\" : 1, \"height\" : 1 }, { \"width\" : 1, \"height\" : 1 } ], \"files\" : [ { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 }, { \"extension\" : \"extension\", \"has_preview_image\" : true, \"post_id\" : \"post_id\", \"size\" : 4, \"user_id\" : \"user_id\", \"mime_type\" : \"mime_type\", \"update_at\" : 3, \"name\" : \"name\", \"width\" : 7, \"delete_at\" : 2, \"id\" : \"id\", \"create_at\" : 9, \"height\" : 1 } ], \"acknowledgements\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"acknowledged_at\" : 7 } ], \"reactions\" : [ { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 }, { \"post_id\" : \"post_id\", \"user_id\" : \"user_id\", \"emoji_name\" : \"emoji_name\", \"create_at\" : 6 } ], \"priority\" : { \"requested_ack\" : true, \"priority\" : \"priority\" }, \"embeds\" : [ { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" }, { \"data\" : \"{}\", \"type\" : \"image\", \"url\" : \"url\" } ] }, \"message\" : \"message\", \"type\" : \"type\", \"props\" : \"{}\", \"user_id\" : \"user_id\", \"update_at\" : 6, \"file_ids\" : [ \"file_ids\", \"file_ids\" ], \"delete_at\" : 1, \"root_id\" : \"root_id\", \"id\" : \"id\", \"create_at\" : 0, \"original_id\" : \"original_id\", \"channel_id\" : \"channel_id\", \"edit_at\" : 5, \"hashtag\" : \"hashtag\" } }, \"order\" : [ \"post_id1\", \"post_id12\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/channels/private : Get private channels
     * Get a page of private channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 5.26  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of private channels per page. (optional, default to 60)
     * @return Channels retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getPrivateChannelsForTeam",
        summary = "Get private channels",
        description = "Get a page of private channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 5.26  ##### Permissions Must have `manage_system` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/channels/private",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Channel>> getPrivateChannelsForTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of private channels per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/channels/ids : Get a list of channels by ids
     * Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
     *
     * @param teamId Team GUID (required)
     * @param requestBody List of channel ids (required)
     * @return Channel list retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getPublicChannelsByIdsForTeam",
        summary = "Get a list of channels by ids",
        description = "Get a list of public channels on a team by id. ##### Permissions `view_team` for the team the channels are on. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel list retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/channels/ids",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Channel>> getPublicChannelsByIdsForTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "request_body", description = "List of channel ids", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/teams/{team_id}/channels : Get public channels
     * Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param page The page to select. (optional, default to 0)
     * @param perPage The number of public channels per page. (optional, default to 60)
     * @return Channels retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getPublicChannelsForTeam",
        summary = "Get public channels",
        description = "Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/teams/{team_id}/channels",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Channel>> getPublicChannelsForTeam(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "page", description = "The page to select.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Parameter(name = "per_page", description = "The number of public channels per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "per_page", required = false, defaultValue = "60") Integer perPage
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/{team_id}/channels/categories : Get user&#39;s sidebar categories
     * Get a list of sidebar categories that will appear in the user&#39;s sidebar on the given team, including a list of channel IDs in each category. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @return Category retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getSidebarCategoriesForTeamForUser",
        summary = "Get user's sidebar categories",
        description = "Get a list of sidebar categories that will appear in the user's sidebar on the given team, including a list of channel IDs in each category. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderedSidebarCategories.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories",
        produces = { "application/json" }
    )
    default ResponseEntity<List<OrderedSidebarCategories>> getSidebarCategoriesForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"categories\" : [ { \"channel_ids\" : [ \"channel_ids\", \"channel_ids\" ], \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" }, { \"channel_ids\" : [ \"channel_ids\", \"channel_ids\" ], \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" } ], \"order\" : [ \"order\", \"order\" ] }, { \"categories\" : [ { \"channel_ids\" : [ \"channel_ids\", \"channel_ids\" ], \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" }, { \"channel_ids\" : [ \"channel_ids\", \"channel_ids\" ], \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" } ], \"order\" : [ \"order\", \"order\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/{team_id}/channels/categories/{category_id} : Get sidebar category
     * Returns a single sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param categoryId Category GUID (required)
     * @return Category retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getSidebarCategoryForTeamForUser",
        summary = "Get sidebar category",
        description = "Returns a single sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category retrieval successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SidebarCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories/{category_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<SidebarCategory> getSidebarCategoryForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "category_id", description = "Category GUID", required = true, in = ParameterIn.PATH) @PathVariable("category_id") String categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v4/users/{user_id}/teams/{team_id}/channels/categories/order : Get user&#39;s sidebar category order
     * Returns the order of the sidebar categories for a user on the given team as an array of IDs. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @return Order retrieval successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getSidebarCategoryOrderForTeamForUser",
        summary = "Get user's sidebar category order",
        description = "Returns the order of the sidebar categories for a user on the given team as an array of IDs. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order retrieval successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories/order",
        produces = { "application/json" }
    )
    default ResponseEntity<List<String>> getSidebarCategoryOrderForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/{channel_id}/move : Move a channel
     * Move a channel to another team.  __Minimum server version__: 5.26  ##### Permissions  Must have &#x60;manage_system&#x60; permission. 
     *
     * @param channelId Channel GUID (required)
     * @param moveChannelRequest  (required)
     * @return Channel move successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "moveChannel",
        summary = "Move a channel",
        description = "Move a channel to another team.  __Minimum server version__: 5.26  ##### Permissions  Must have `manage_system` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel move successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/{channel_id}/move",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Channel> moveChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "MoveChannelRequest", description = "", required = true) @Valid @RequestBody MoveChannelRequest moveChannelRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id}/patch : Patch a channel
     * Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
     *
     * @param channelId Channel GUID (required)
     * @param patchChannelRequest Channel object to be updated (required)
     * @return Channel patch successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "patchChannel",
        summary = "Patch a channel",
        description = "Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, `manage_public_channel_members` permission is required. If updating a private channel, `manage_private_channel_members` permission is required. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel patch successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Channel> patchChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "PatchChannelRequest", description = "Channel object to be updated", required = true) @Valid @RequestBody PatchChannelRequest patchChannelRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id}/moderations/patch : Update a channel&#39;s moderation settings.
     * ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.22 
     *
     * @param channelId Channel GUID (required)
     * @param channelModerationPatch  (required)
     * @return Patched successfully (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "patchChannelModerations",
        summary = "Update a channel's moderation settings.",
        description = "##### Permissions Must have `manage_system` permission.  __Minimum server version__: 5.22 ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Patched successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ChannelModeration.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}/moderations/patch",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<ChannelModeration>> patchChannelModerations(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "ChannelModerationPatch", description = "", required = true) @Valid @RequestBody ChannelModerationPatch channelModerationPatch
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"roles\" : { \"members\" : { \"value\" : true, \"enabled\" : true }, \"guests\" : { \"value\" : true, \"enabled\" : true } }, \"name\" : \"name\" }, { \"roles\" : { \"members\" : { \"value\" : true, \"enabled\" : true }, \"guests\" : { \"value\" : true, \"enabled\" : true } }, \"name\" : \"name\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/users/{user_id}/teams/{team_id}/channels/categories/{category_id} : Delete sidebar category
     * Deletes a single sidebar category for the user on the given team. Only custom categories can be deleted. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param categoryId Category GUID (required)
     * @return Category delete successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "removeSidebarCategoryForTeamForUser",
        summary = "Delete sidebar category",
        description = "Deletes a single sidebar category for the user on the given team. Only custom categories can be deleted. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category delete successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SidebarCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories/{category_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<SidebarCategory> removeSidebarCategoryForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "category_id", description = "Category GUID", required = true, in = ParameterIn.PATH) @PathVariable("category_id") String categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v4/channels/{channel_id}/members/{user_id} : Remove user from channel
     * Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
     *
     * @param channelId Channel GUID (required)
     * @param userId User GUID (required)
     * @return Channel member deletion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "removeUserFromChannel",
        summary = "Remove user from channel",
        description = "Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions `manage_public_channel_members` permission if the channel is public. `manage_private_channel_members` permission if the channel is private. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel member deletion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v4/channels/{channel_id}/members/{user_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<StatusOK> removeUserFromChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/{channel_id}/restore : Restore a channel
     * Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
     *
     * @param channelId Channel GUID (required)
     * @return Channel restore successful (status code 200)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "restoreChannel",
        summary = "Restore a channel",
        description = "Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions `manage_team` permission for the team of the channel. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel restore successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/{channel_id}/restore",
        produces = { "application/json" }
    )
    default ResponseEntity<Channel> restoreChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/search : Search all private and open type channels across all teams
     * Returns all private and open type channels where &#39;term&#39; matches on the name, display name, or purpose of the channel.  Configured &#39;default&#39; channels (ex Town Square and Off-Topic) can be excluded from the results with the &#x60;exclude_default_channels&#x60; boolean parameter.  Channels that are associated (via GroupChannel records) to a given group can be excluded from the results with the &#x60;not_associated_to_group&#x60; parameter and a group id string. 
     *
     * @param searchAllChannelsRequest The search terms and logic to use in the search. (required)
     * @param systemConsole Is the request from system_console. If this is set to true, it filters channels by the logged in user.  (optional, default to true)
     * @return Paginated channel response. (Note that the non-paginated response—returned if the request body does not contain both &#x60;page&#x60; and &#x60;per_page&#x60; fields—is a simple array of channels.) (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     */
    @Operation(
        operationId = "searchAllChannels",
        summary = "Search all private and open type channels across all teams",
        description = "Returns all private and open type channels where 'term' matches on the name, display name, or purpose of the channel.  Configured 'default' channels (ex Town Square and Off-Topic) can be excluded from the results with the `exclude_default_channels` boolean parameter.  Channels that are associated (via GroupChannel records) to a given group can be excluded from the results with the `not_associated_to_group` parameter and a group id string. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Paginated channel response. (Note that the non-paginated response—returned if the request body does not contain both `page` and `per_page` fields—is a simple array of channels.)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SearchAllChannels200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SearchAllChannels200Response> searchAllChannels(
        @Parameter(name = "SearchAllChannelsRequest", description = "The search terms and logic to use in the search.", required = true) @Valid @RequestBody SearchAllChannelsRequest searchAllChannelsRequest,
        @Parameter(name = "system_console", description = "Is the request from system_console. If this is set to true, it filters channels by the logged in user. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "system_console", required = false, defaultValue = "true") Boolean systemConsole
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"channels\" : [ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ], \"total_count\" : 0.8008281904610115 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/channels/search_archived : Search archived channels
     * Search archived channels on a team based on the search term provided in the request body.  __Minimum server version__: 5.18  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.18 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
     *
     * @param teamId Team GUID (required)
     * @param searchArchivedChannelsRequest Search criteria (required)
     * @return Channels search successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "searchArchivedChannels",
        summary = "Search archived channels",
        description = "Search archived channels on a team based on the search term provided in the request body.  __Minimum server version__: 5.18  ##### Permissions Must have the `list_team_channels` permission.  In server version 5.18 and later, a user without the `list_team_channels` permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Channels search successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/channels/search_archived",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Channel>> searchArchivedChannels(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "SearchArchivedChannelsRequest", description = "Search criteria", required = true) @Valid @RequestBody SearchArchivedChannelsRequest searchArchivedChannelsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/teams/{team_id}/channels/search : Search channels
     * Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
     *
     * @param teamId Team GUID (required)
     * @param searchChannelsRequest Search criteria (required)
     * @return Channels search successful (status code 201)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "searchChannels",
        summary = "Search channels",
        description = "Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the `list_team_channels` permission.  In server version 5.16 and later, a user without the `list_team_channels` permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Channels search successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/teams/{team_id}/channels/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Channel>> searchChannels(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "SearchChannelsRequest", description = "Search criteria", required = true) @Valid @RequestBody SearchChannelsRequest searchChannelsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/group/search : Search Group Channels
     * Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
     *
     * @param searchGroupChannelsRequest Search criteria (required)
     * @return Channels search successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     */
    @Operation(
        operationId = "searchGroupChannels",
        summary = "Search Group Channels",
        description = "Get a list of group channels for a user which members' usernames match the search term.  __Minimum server version__: 5.14 ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channels search successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Channel.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/group/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Channel>> searchGroupChannels(
        @Parameter(name = "SearchGroupChannelsRequest", description = "Search criteria", required = true) @Valid @RequestBody SearchGroupChannelsRequest searchGroupChannelsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }, { \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id} : Update a channel
     * Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
     *
     * @param channelId Channel GUID (required)
     * @param updateChannelRequest Channel object to be updated (required)
     * @return Channel update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateChannel",
        summary = "Update a channel",
        description = "Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, `manage_public_channel_members` permission is required. If updating a private channel, `manage_private_channel_members` permission is required. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Channel> updateChannel(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "UpdateChannelRequest", description = "Channel object to be updated", required = true) @Valid @RequestBody UpdateChannelRequest updateChannelRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id}/members/{user_id}/schemeRoles : Update the scheme-derived roles of a channel member.
     * Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
     *
     * @param channelId Channel GUID (required)
     * @param userId User GUID (required)
     * @param updateChannelMemberSchemeRolesRequest Scheme properties. (required)
     * @return Channel member&#39;s scheme-derived roles updated successfully. (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateChannelMemberSchemeRoles",
        summary = "Update the scheme-derived roles of a channel member.",
        description = "Update a channel member's scheme_admin/scheme_user properties. Typically this should either be `scheme_admin=false, scheme_user=true` for ordinary channel member, or `scheme_admin=true, scheme_user=true` for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the `manage_channel_roles` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel member's scheme-derived roles updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}/members/{user_id}/schemeRoles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateChannelMemberSchemeRoles(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateChannelMemberSchemeRolesRequest", description = "Scheme properties.", required = true) @Valid @RequestBody UpdateChannelMemberSchemeRolesRequest updateChannelMemberSchemeRolesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id}/members/{user_id}/notify_props : Update channel notifications
     * Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
     *
     * @param channelId Channel GUID (required)
     * @param userId User GUID (required)
     * @param channelNotifyProps  (required)
     * @return Channel notification properties update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateChannelNotifyProps",
        summary = "Update channel notifications",
        description = "Update a user's notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have `edit_other_users` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel notification properties update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}/members/{user_id}/notify_props",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateChannelNotifyProps(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "ChannelNotifyProps", description = "", required = true) @Valid @RequestBody ChannelNotifyProps channelNotifyProps
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id}/privacy : Update channel&#39;s privacy
     * Updates channel&#39;s privacy allowing changing a channel from Public to Private and back.  __Minimum server version__: 5.16  ##### Permissions &#x60;manage_team&#x60; permission for the channels team on version &lt; 5.28. &#x60;convert_public_channel_to_private&#x60; permission for the channel if updating privacy to &#39;P&#39; on version &gt;&#x3D; 5.28. &#x60;convert_private_channel_to_public&#x60; permission for the channel if updating privacy to &#39;O&#39; on version &gt;&#x3D; 5.28. 
     *
     * @param channelId Channel GUID (required)
     * @param updateChannelPrivacyRequest  (required)
     * @return Channel conversion successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateChannelPrivacy",
        summary = "Update channel's privacy",
        description = "Updates channel's privacy allowing changing a channel from Public to Private and back.  __Minimum server version__: 5.16  ##### Permissions `manage_team` permission for the channels team on version < 5.28. `convert_public_channel_to_private` permission for the channel if updating privacy to 'P' on version >= 5.28. `convert_private_channel_to_public` permission for the channel if updating privacy to 'O' on version >= 5.28. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel conversion successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Channel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}/privacy",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Channel> updateChannelPrivacy(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "UpdateChannelPrivacyRequest", description = "", required = true) @Valid @RequestBody UpdateChannelPrivacyRequest updateChannelPrivacyRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"purpose\" : \"purpose\", \"extra_update_at\" : 2, \"total_msg_count\" : 5, \"team_id\" : \"team_id\", \"type\" : \"type\", \"display_name\" : \"display_name\", \"update_at\" : 6, \"name\" : \"name\", \"creator_id\" : \"creator_id\", \"delete_at\" : 1, \"header\" : \"header\", \"id\" : \"id\", \"create_at\" : 0, \"last_post_at\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id}/members/{user_id}/roles : Update channel roles
     * Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
     *
     * @param channelId Channel GUID (required)
     * @param userId User GUID (required)
     * @param updateChannelRolesRequest Space-delimited channel roles to assign to the user (required)
     * @return Channel roles update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "updateChannelRoles",
        summary = "Update channel roles",
        description = "Update a user's roles for a channel. ##### Permissions Must have `manage_channel_roles` permission for the channel. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel roles update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}/members/{user_id}/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateChannelRoles(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "UpdateChannelRolesRequest", description = "Space-delimited channel roles to assign to the user", required = true) @Valid @RequestBody UpdateChannelRolesRequest updateChannelRolesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/channels/{channel_id}/scheme : Set a channel&#39;s scheme
     * Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
     *
     * @param channelId Channel GUID (required)
     * @param updateChannelSchemeRequest Scheme GUID (required)
     * @return Update channel scheme successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Feature is disabled (status code 501)
     */
    @Operation(
        operationId = "updateChannelScheme",
        summary = "Set a channel's scheme",
        description = "Set a channel's scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have `manage_system` permission.  __Minimum server version__: 4.10 ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Update channel scheme successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StatusOK.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "501", description = "Feature is disabled", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/channels/{channel_id}/scheme",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<StatusOK> updateChannelScheme(
        @Parameter(name = "channel_id", description = "Channel GUID", required = true, in = ParameterIn.PATH) @PathVariable("channel_id") String channelId,
        @Parameter(name = "UpdateChannelSchemeRequest", description = "Scheme GUID", required = true) @Valid @RequestBody UpdateChannelSchemeRequest updateChannelSchemeRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/teams/{team_id}/channels/categories : Update user&#39;s sidebar categories
     * Update any number of sidebar categories for the user on the given team. This can be used to reorder the channels in these categories. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param sidebarCategory  (required)
     * @return Category update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateSidebarCategoriesForTeamForUser",
        summary = "Update user's sidebar categories",
        description = "Update any number of sidebar categories for the user on the given team. This can be used to reorder the channels in these categories. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SidebarCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SidebarCategory> updateSidebarCategoriesForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "SidebarCategory", description = "", required = true) @Valid @RequestBody List<SidebarCategory> sidebarCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/teams/{team_id}/channels/categories/{category_id} : Update sidebar category
     * Updates a single sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param categoryId Category GUID (required)
     * @param sidebarCategory  (required)
     * @return Category update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateSidebarCategoryForTeamForUser",
        summary = "Update sidebar category",
        description = "Updates a single sidebar category for the user on the given team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Category update successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SidebarCategory.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories/{category_id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SidebarCategory> updateSidebarCategoryForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "category_id", description = "Category GUID", required = true, in = ParameterIn.PATH) @PathVariable("category_id") String categoryId,
        @Parameter(name = "SidebarCategory", description = "", required = true) @Valid @RequestBody SidebarCategory sidebarCategory
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"user_id\" : \"user_id\", \"id\" : \"id\", \"team_id\" : \"team_id\", \"display_name\" : \"display_name\", \"type\" : \"channels\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v4/users/{user_id}/teams/{team_id}/channels/categories/order : Update user&#39;s sidebar category order
     * Updates the order of the sidebar categories for a user on the given team. The provided array must include the IDs of all categories on the team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
     *
     * @param teamId Team GUID (required)
     * @param userId User GUID (required)
     * @param requestBody  (required)
     * @return Order update successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateSidebarCategoryOrderForTeamForUser",
        summary = "Update user's sidebar category order",
        description = "Updates the order of the sidebar categories for a user on the given team. The provided array must include the IDs of all categories on the team. __Minimum server version__: 5.26 ##### Permissions Must be authenticated and have the `list_team_channels` permission. ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order update successful", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v4/users/{user_id}/teams/{team_id}/channels/categories/order",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<String>> updateSidebarCategoryOrderForTeamForUser(
        @Parameter(name = "team_id", description = "Team GUID", required = true, in = ParameterIn.PATH) @PathVariable("team_id") String teamId,
        @Parameter(name = "user_id", description = "User GUID", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "request_body", description = "", required = true) @Valid @RequestBody List<String> requestBody
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"\", \"\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v4/channels/members/{user_id}/view : View channel
     * Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
     *
     * @param userId User ID to perform the view action for (required)
     * @param viewChannelRequest Paremeters affecting how and which channels to view (required)
     * @return Channel view successful (status code 200)
     *         or Invalid or missing parameters in URL or request body (status code 400)
     *         or No access token provided (status code 401)
     *         or Do not have appropriate permissions (status code 403)
     */
    @Operation(
        operationId = "viewChannel",
        summary = "View channel",
        description = "Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have `edit_other_users` permission.  __Response only includes `last_viewed_at_times` in Mattermost server 4.3 and newer.__ ",
        tags = { "channels" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Channel view successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ViewChannel200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid or missing parameters in URL or request body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "401", description = "No access token provided", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            }),
            @ApiResponse(responseCode = "403", description = "Do not have appropriate permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AppError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v4/channels/members/{user_id}/view",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ViewChannel200Response> viewChannel(
        @Parameter(name = "user_id", description = "User ID to perform the view action for", required = true, in = ParameterIn.PATH) @PathVariable("user_id") String userId,
        @Parameter(name = "ViewChannelRequest", description = "Paremeters affecting how and which channels to view", required = true) @Valid @RequestBody ViewChannelRequest viewChannelRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"last_viewed_at_times\" : \"{}\", \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
